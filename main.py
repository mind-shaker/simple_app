from fastapi import FastAPI, Request
from telegram import Bot
import os
import asyncpg
from openai import AsyncOpenAI
import json

DATABASE_URL = os.getenv("DATABASE_URL")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # –ù–æ–≤–∏–π –∫–ª—é—á –¥–ª—è openai

bot = Bot(token=TELEGRAM_TOKEN)
app = FastAPI()

openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

async def get_connection():
    return await asyncpg.connect(DATABASE_URL)

async def query_openai_chat(messages: list[dict]) -> str:
    try:
        print("üì¶ messages:", messages)

        response = await openai_client.chat.completions.create(
            model="gpt-4o",  # –∞–±–æ "gpt-3.5-turbo" –¥–ª—è –¥–µ—à–µ–≤—à–æ—ó –º–æ–¥–µ–ª—ñ
            messages=messages
        )
        print("üì¶ response:", response)
        return response.choices[0].message.content
    except Exception as e:
        return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ OpenAI API: {e}"




@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_text = message.get("text", "")
    from_user = message.get("from", {})

    user_id = from_user.get("id")
    username = from_user.get("username")
    first_name = from_user.get("first_name", "")
    last_name = from_user.get("last_name", "")
    full_name = f"{first_name} {last_name}".strip()

    mark = 0
    conn = await get_connection()
    try:
        existing_user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id)

        if user_id is not None:
            if not existing_user:
                await conn.execute(
                    "INSERT INTO users (telegram_id, username, full_name) VALUES ($1, $2, $3)",
                    user_id, username, full_name
                )
                await bot.send_message(chat_id=chat_id, text="üëã –í—ñ—Ç–∞—é! –í–∏ –¥–æ–¥–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—É.")
                mark = 1
        else:
            print("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—Å—Ç–∞–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: user_id = None")
            return {"status": "skipped_null_user"}


        if user_text.strip().lower() == "/start":
            # –Ø–∫—â–æ –ø—Ä–æ—Ñ—ñ–ª—å –≤–∂–µ —î, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
            db_user_id = existing_user["id"] if existing_user else (await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id))["id"]
            existing_profile = await conn.fetchrow("SELECT * FROM simulated_personas WHERE user_id = $1", db_user_id)
            if not existing_profile:
    
                init_msg = await bot.send_message(chat_id=chat_id, text="‚úÖ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –í–∞—à–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞..")
                profile_reference = {
                      "name": "Mariam",
                      "age": 24,
                      "country": "Egypt",
                      "difficulty_level": "1‚Äì5",
                      "religious_context": "muslim",
                      "personality": "Skeptical but emotionally open",
                      "barriers": ["God and suffering", "trust in religion"],
                      "openness": "Medium",
                      "goal": "To see if God is real and personal",
                      "big_five_traits": {
                            "openness": "high",
                            "conscientiousness": "medium",
                            "extraversion": "low",
                            "agreeableness": "medium",
                            "neuroticism": "high"
                      },
                      "temperament": "Melancholic",
                      "worldview_and_values": ["Humanism", "Skepticism"],
                      "beliefs": ["Religion is man-made", "God may exist but is distant"],
                      "motivation_and_goals": ["Find meaning after loss", "Reconnect with hope"],
                      "background": "Grew up in nominal faith, lost friend in accident",
                      "erikson_stage": "Young adulthood ‚Äî Intimacy vs. Isolation",
                      "emotional_intelligence": "Moderate",
                      "thinking_style": "Analytical with emotional interference",
                      "biological_factors": ["Sleep-deprived", "Hormonal imbalance"],
                      "social_context": ["Urban Egyptian culture", "Peers secular"],
                      "enneagram": "Type 4 ‚Äî Individualist",
                      "disc_profile": "C ‚Äî Conscientious",
                      "stress_tolerance": "Low",
                      "self_image": "Feels broken, searching for healing",
                      "cognitive_biases": ["Confirmation bias", "Negativity bias"],
                      "attachment_style": "Anxious-preoccupied",
                      "religion": "Nominal Christian",
                      "trauma_history": "Friend's death in accident ‚Äî unresolved",
                      "stress_level": "High",
                      "habits": ["Night owl", "Avoids social events"],
                      "why_contacted_us": "Saw Christian video that made her cry",
                      "digital_behavior": ["Active on Instagram", "Searches for spiritual content"],
                      "peer_pressure": ["Friends mock faith"],
                      "attachment_history": "Emotionally distant parents (based on Bowlby theory)",
                      "culture": "Middle Eastern / Egyptian",
                      "neuroprofile": "Sensitive limbic response",
                      "meta_programs": ["Away-from motivation", "External validation"],
                      "philosophical_views": ["Existentialism", "Skepticism"]
                }
                system_prompt = f"""
                –¢–∏ ‚Äî –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ –≤–∏–≥–∞–¥–∞–Ω–∏—Ö –ª—é–¥–µ–π.  
                –û—Å—å –ø—Ä–∏–∫–ª–∞–¥ –ø—Ä–æ—Ñ—ñ–ª—é, –Ω–∞ –æ—Å–Ω–æ–≤—ñ —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å—Ö–æ–∂–∏–π –ø—Ä–æ—Ñ—ñ–ª—å, –∞–ª–µ –∑ —ñ–Ω—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏:  
                {json.dumps(profile_reference, ensure_ascii=False, indent=2)}

                –ó–≥–µ–Ω–µ—Ä—É–π –Ω–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ø–æ–¥—ñ–±–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞ —Ñ–æ—Ä–º–∞—Ç, –∞–ª–µ –∑ –Ω–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏, —è–∫—ñ –ª–æ–≥—ñ—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –ø–æ–ª—è–º.  
                –ü–æ–ª–µ difficulty_level –º–∞—î –±—É—Ç–∏ –æ–¥–Ω–∏–º —ñ–∑: 
                  1 ‚Äî –í—ñ–¥–∫—Ä–∏—Ç–∏–π, –∑ –ª–µ–≥–∫–∏–º –¥—É—Ö–æ–≤–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º  
                  2 ‚Äî –°—É–º–Ω—ñ–≤–∞—é—á–∏–π—Å—è, —à—É–∫–∞—î, –∞–ª–µ –∑ –±–∞—Ä'—î—Ä–∞–º–∏  
                  3 ‚Äî –ï–º–æ—Ü—ñ–π–Ω–æ —Ç—Ä–∞–≤–º–æ–≤–∞–Ω–∏–π, –∑–∞–∫—Ä–∏—Ç–∏–π, –∫—Ä–∏—Ç–∏—á–Ω–∏–π  
                  4 ‚Äî –í–æ—Ä–æ–∂–∏–π –∞–±–æ –∞–ø–∞—Ç–∏—á–Ω–∏–π, –∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º –æ—Å–æ–±–∏—Å—Ç–∏–º –¥–æ—Å–≤—ñ–¥–æ–º  
                  5 ‚Äî –ü—Ä–æ–≤–æ–∫–∞—Ç–∏–≤–Ω–∏–π, –∞–≥—Ä–µ—Å–∏–≤–Ω–∏–π, —Ç–µ–æ–ª–æ–≥—ñ—á–Ω–æ –ø—ñ–¥–∫–æ–≤–∞–Ω–∏–π

                –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–∞–π —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON, –±–µ–∑ –∂–æ–¥–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å.
                –ë–µ–∑ –∫–æ–¥—É markdown, —Ç—ñ–ª—å–∫–∏ JSON.
                """
                messages = [
                    {"role": "system", "content": system_prompt}
                ]
                response = await query_openai_chat(messages=messages)
                
                # –ü–∞—Ä—Å–∏–º–æ json –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —á–∞—Ç—É
                try:
                    persona = json.loads(response)
                except Exception as e:
                    await bot.send_message(chat_id=chat_id, text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
                    return {"status": "error_parsing_profile"}

                # –í—Å—Ç–∞–≤–ª—è—î–º–æ –≤ –±–∞–∑—É
                await conn.execute(
                    """
                    INSERT INTO simulated_personas (
                        user_id, name, age, country, difficulty_level, religious_context, personality,
                        barriers, openness, goal, big_five_traits, temperament, worldview_and_values,
                        beliefs, motivation_and_goals, background, erikson_stage, emotional_intelligence,
                        thinking_style, biological_factors, social_context, enneagram, disc_profile,
                        stress_tolerance, self_image, cognitive_biases, attachment_style, religion,
                        trauma_history, stress_level, habits, why_contacted_us, digital_behavior,
                        peer_pressure, attachment_history, culture, neuroprofile, meta_programs, philosophical_views
                    ) VALUES (
                        $1, $2, $3, $4, $5, $6, $7,
                        $8, $9, $10, $11, $12, $13,
                        $14, $15, $16, $17, $18,
                        $19, $20, $21, $22, $23,
                        $24, $25, $26, $27, $28,
                        $29, $30, $31, $32, $33,
                        $34, $35, $36, $37, $38, $39
                    )
                    """,
                    db_user_id,
                    persona.get("name"),
                    persona.get("age"),
                    persona.get("country"),
                    persona.get("difficulty_level"),
                    persona.get("religious_context"),
                    persona.get("personality"),
                    persona.get("barriers"),
                    persona.get("openness"),
                    persona.get("goal"),
                    json.dumps(persona.get("big_five_traits")),
                    persona.get("temperament"),
                    persona.get("worldview_and_values"),
                    persona.get("beliefs"),
                    persona.get("motivation_and_goals"),
                    persona.get("background"),
                    persona.get("erikson_stage"),
                    persona.get("emotional_intelligence"),
                    persona.get("thinking_style"),
                    persona.get("biological_factors"),
                    persona.get("social_context"),
                    persona.get("enneagram"),
                    persona.get("disc_profile"),
                    persona.get("stress_tolerance"),
                    persona.get("self_image"),
                    persona.get("cognitive_biases"),
                    persona.get("attachment_style"),
                    persona.get("religion"),
                    persona.get("trauma_history"),
                    persona.get("stress_level"),
                    persona.get("habits"),
                    persona.get("why_contacted_us"),
                    persona.get("digital_behavior"),
                    persona.get("peer_pressure"),
                    persona.get("attachment_history"),
                    persona.get("culture"),
                    persona.get("neuroprofile"),
                    persona.get("meta_programs"),
                    persona.get("philosophical_views"),
                )
                await init_msg.delete()
                await bot.send_message(chat_id=chat_id, text="‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –í–∞—à–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")    
            else:
                await bot.send_message(chat_id=chat_id, text="‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –í–∞—à–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–æ–¥–æ–≤–∂–∏–º–æ –¥—ñ–∞–ª–æ–≥.")
            mark = 1

        if user_text.lower().startswith("/country="):
            country_code = user_text.split("=", 1)[1].strip().upper()
            await conn.execute("UPDATE users SET country = $1 WHERE telegram_id = $2", country_code, user_id)
            await bot.send_message(chat_id=chat_id, text=f"‚úÖ –ö—Ä–∞—ó–Ω—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {country_code}")
            mark = 1

        if user_text.lower().startswith("/language="):
            lang_code = user_text.split("=", 1)[1].strip().lower()
            await conn.execute("UPDATE users SET language = $1 WHERE telegram_id = $2", lang_code, user_id)
            await bot.send_message(chat_id=chat_id, text=f"‚úÖ –ú–æ–≤—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {lang_code}")
            mark = 1

        existing_user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id)

        if not existing_user["country"]:
            await bot.send_message(chat_id=chat_id, text="üåç –í–≤–µ–¥—ñ—Ç—å –∫—Ä–∞—ó–Ω—É: `/country=UA`", parse_mode="Markdown")
            return {"status": "waiting_country"}

        if not existing_user["language"]:
            await bot.send_message(chat_id=chat_id, text="üî• –í–≤–µ–¥—ñ—Ç—å –º–æ–≤—É: `/language=ua`", parse_mode="Markdown")
            return {"status": "waiting_language"}

        if mark == 1:
            await bot.send_message(chat_id=chat_id, text="–†–æ–∑–ø–æ—á–Ω–∏–º–æ –¥—ñ–∞–ª–æ–≥")
            return {"status": "data_updated"}

        db_user_id = existing_user["id"]
        
        if user_text.strip().lower() == "/erasure":
            await conn.execute("DELETE FROM dialogs WHERE user_id = $1", db_user_id)
            await bot.send_message(chat_id=chat_id, text="üóëÔ∏è –í—Å—ñ –≤–∞—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ")
            return

        if user_text.strip().lower() == "/erasure_profile":
            # –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—î—ó —Ç–∞–±–ª–∏—Ü—ñ simulated_personas
            await conn.execute("TRUNCATE TABLE simulated_personas;")
            
            # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —â–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            # await conn.execute("DELETE FROM dialogs WHERE user_id = $1", db_user_id)
            
            await bot.send_message(chat_id=chat_id, text="üóëÔ∏è –¢–∞–±–ª–∏—Ü—è –∑ –ø—Ä–æ—Ñ—ñ–ª—è–º–∏ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
            return

        thinking_msg = await bot.send_message(chat_id=chat_id, text="üß† –î—É–º–∞—é...")

        await conn.execute(
            "INSERT INTO dialogs (user_id, role, message, created_at) VALUES ($1, 'user', $2, NOW())",
            db_user_id, user_text
        )

        rows = await conn.fetch(
            "SELECT role, message FROM dialogs WHERE user_id = $1 ORDER BY id DESC LIMIT 10",
            db_user_id
        )
        rows = list(reversed(rows))

        
        user_messages = [
            {
                "role": "assistant" if row["role"] == "ai" else row["role"],
                "content": row["message"]
            }
            for row in rows
        ]

        print("üì¶ user_id:", user_id)
        # –í–∏—Ç—è–≥–Ω—É—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å —ñ–∑ –±–∞–∑–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, user_id)
        profile_row = await conn.fetchrow("SELECT * FROM simulated_personas WHERE user_id = $1", user_id)
        if not profile_row:
            # –Ø–∫—â–æ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ–º–∞—î, –º–æ–∂–µ—à –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
            print("üì¶ profile is empty:")
            profile_content = "{}"
        else:
            # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ –ø—Ä–æ—Ñ—ñ–ª—å —É —Ç–∞–±–ª–∏—Ü—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —É –ø–æ–ª—ñ profile_json —É –≤–∏–≥–ª—è–¥—ñ JSON —Ä—è–¥–∫–∞
            profile_content = profile_row["profile_json"]
            print("üì¶ profile_content:", profile_content)
        
        # –§–æ—Ä–º—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ—Ñ—ñ–ª–µ–º
        system_message = {
            "role": "system",
            "content": f"Assistant profile for this session:\n{profile_content}"
        }
        
        # –î–∞–ª—ñ —Ñ–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –¥–æ–¥–∞—î–º–æ system_message —Å–ø–æ—á–∞—Ç–∫—É, –ø–æ—Ç—ñ–º user_messages
        messages = [system_message] + user_messages

    
        # messages = [{"role": row["role"], "content": row["message"]} for row in rows]
        # messages = [{'role': 'user', 'content': user_text}]

        response_text = await query_openai_chat(messages)

        await conn.execute(
            "INSERT INTO dialogs (user_id, role, message, created_at) VALUES ($1, 'ai', $2, NOW())",
            db_user_id, response_text
        )

        try:
            await thinking_msg.delete()
        except:
            pass

        await bot.send_message(chat_id=chat_id, text=response_text)

    finally:
        await conn.close()

    return {"status": "ok"}
