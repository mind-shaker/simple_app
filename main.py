from fastapi import FastAPI, Request
from telegram import Bot
import os
import httpx
import asyncpg


DATABASE_URL = os.getenv("DATABASE_URL")  # –Ω–∞–ø—Ä.: "postgresql://user:pass@host:port/dbname"

async def get_connection():
    return await asyncpg.connect(DATABASE_URL)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
API_KEY = os.getenv("OPENROUTER_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

bot = Bot(token=TELEGRAM_TOKEN)
app = FastAPI()


API_URL = "https://openrouter.ai/api/v1/chat/completions"

headers = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

async def query_openrouter_chat(messages: list[dict]) -> str:
    payload = {
        "model": "mistralai/mistral-small-3.2-24b-instruct:free",
        "messages": messages
    }

    async with httpx.AsyncClient(timeout=30) as client:
        try:
            print("üì¶ payload API:", payload)
            response = await client.post(API_URL, headers=headers, json=payload)
            print("üì¶ JSON-–≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API:", response)
            response.raise_for_status()
            
            data = response.json()
            # print("üì¶ JSON-data:", data)
            # –í—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ñ–æ—Ä–º–∞—Ç—ñ OpenAI-like: –±–µ—Ä–µ–º–æ text –∑ choices[0].message.content
            return data["choices"][0]["message"]["content"]
        except Exception as e:
            return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ OpenRouter API: {e}"

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_text = message.get("text", "")
    from_user = message.get("from", {})

    user_id = from_user.get("id")
    username = from_user.get("username")
    first_name = from_user.get("first_name", "")
    last_name = from_user.get("last_name", "")
    full_name = f"{first_name} {last_name}".strip()

    mark = 0  # –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –∑–º—ñ–Ω–∏ –¥–∞–Ω–∏—Ö

    conn = await get_connection()
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏
        existing_user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id)

        if user_id is not None:
            if not existing_user:
                await conn.execute(
                    "INSERT INTO users (telegram_id, username, full_name) VALUES ($1, $2, $3)",
                    user_id, username, full_name
                )
                await bot.send_message(chat_id=chat_id, text="üëã –í—ñ—Ç–∞—é! –í–∏ –¥–æ–¥–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—É.")
                mark = 1
                
        else:
            print("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—Å—Ç–∞–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: user_id = None")
            return {"status": "skipped_null_user"}

                

        # –û–±—Ä–æ–±–∫–∞ /start
        if user_text.strip().lower() == "/start":
            await bot.send_message(chat_id=chat_id, text="‚úÖ –í–∏ –≤–∂–µ –≤ —Å–∏—Å—Ç–µ–º—ñ. –ü—Ä–æ–¥–æ–≤–∂–∏–º–æ üëá")
            mark = 1

        # –û–±—Ä–æ–±–∫–∞ /country=
        if user_text.lower().startswith("/country="):
            country_code = user_text.split("=", 1)[1].strip().upper()
            await conn.execute(
                "UPDATE users SET country = $1 WHERE telegram_id = $2",
                country_code, user_id
            )
            await bot.send_message(chat_id=chat_id, text=f"‚úÖ –ö—Ä–∞—ó–Ω—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {country_code}")
            mark = 1

        # –û–±—Ä–æ–±–∫–∞ /language=
        if user_text.lower().startswith("/language="):
            lang_code = user_text.split("=", 1)[1].strip().lower()
            await conn.execute(
                "UPDATE users SET language = $1 WHERE telegram_id = $2",
                lang_code, user_id
            )
            await bot.send_message(chat_id=chat_id, text=f"‚úÖ –ú–æ–≤—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {lang_code}")
            mark = 1

        # –ü–µ—Ä–µ—á–∏—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω—å
        existing_user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –∞–±–æ –ø—Ä–æ–±—ñ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è country
        country = existing_user["country"]
        if not country or country.strip() == "":
            await bot.send_message(chat_id=chat_id, text="üåç –í–≤–µ–¥—ñ—Ç—å –∫—Ä–∞—ó–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: `/country=UA`", parse_mode="Markdown")
            return {"status": "waiting_country"}

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –∞–±–æ –ø—Ä–æ–±—ñ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è language
        language = existing_user["language"]
        if not language or language.strip() == "":
            await bot.send_message(chat_id=chat_id, text="üó£ –í–≤–µ–¥—ñ—Ç—å –º–æ–≤—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: `/language=ua`", parse_mode="Markdown")
            return {"status": "waiting_language"}

        # –Ø–∫—â–æ –±—É–ª–∏ –∑–º—ñ–Ω–∏ ‚Äî –∑–∞–≤–µ—Ä—à—É—î–º–æ –æ–±—Ä–æ–±–∫—É
        if mark == 1:
            await bot.send_message(chat_id=chat_id, text=f"–ï—Ç–∞–ø –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –¥—ñ–∞–ª–æ–≥")
            return {"status": "data_updated"}

        db_user_id = existing_user["id"]  # –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π user_id —É –±–∞–∑—ñ –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
        if user_text.strip().lower() == "/erasure":
            await conn.execute("DELETE FROM dialogs WHERE user_id = $1", db_user_id)
            await bot.send_message(chat_id=chat_id, text="üóëÔ∏è –í—Å—ñ –≤–∞—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏.")
            return

        # –í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–æ –®–Ü
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ
        thinking_msg = await bot.send_message(chat_id=chat_id, text="üß† –î—É–º–∞—é...")

        # 1. –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await conn.execute(
            "INSERT INTO dialogs (user_id, role, message, created_at) VALUES ($1, 'user', $2, NOW())",
            db_user_id, user_text
        )

        # 1.5 –ì–æ—Ç—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ –æ–¥–Ω–µ
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        rows = await conn.fetch(
            "SELECT role, message FROM dialogs WHERE user_id = $1 ORDER BY id ASC LIMIT 10",
            db_user_id
        )

        # –§–æ—Ä–º—É—î–º–æ –º–∞—Å–∏–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ, —è–∫–∏–π —Ä–æ–∑—É–º—ñ—î Hugging Face API
        messages = [{"role": row["role"], "content": row["message"]} for row in rows]
        
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –¥–æ –®–Ü)
        # messages.append({"role": "user", "content": user_text})
        
        # 2. –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –®–Ü
        response_text = await query_openrouter_chat(messages)

        print("üë§ response_text:", response_text)
        
        # 3. –ó–±–µ—Ä–µ–≥—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –®–Ü
        await conn.execute(
            "INSERT INTO dialogs (user_id, role, message, created_at) VALUES ($1, 'ai', $2, NOW())",
            db_user_id, response_text
        )

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ —â–µ —î
        try:
            await thinking_msg.delete()
        except Exception as e:
            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ) ‚Äî –º–æ–∂–Ω–∞ –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏
            pass
        await bot.send_message(chat_id=chat_id, text=response_text)

    finally:
        await conn.close()

    return {"status": "ok"}
