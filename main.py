#==================================================== –Ü–º–ø–æ—Ä—Ç–∏ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
from fastapi import FastAPI, Request
from telegram import Bot
import os
import asyncpg
import redis.asyncio as redis
from openai import AsyncOpenAI
import json

print("–¢–ï–°–¢ –ù–ê –ü–ï–†–®–ò–ô –í–•–Ü–î –í –ë–û–¢–ê")
print(f"–¢–ï–°–¢ –ù–ê –ü–ï–†–®–ò–ô –í–•–Ü–î")
#=================================================== –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
DATABASE_URL = os.getenv("DATABASE_URL")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
#REDIS_URL = os.getenv("REDIS_URL")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, redis://:password@host:port

#=================================================== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
bot = Bot(token=TELEGRAM_TOKEN)
app = FastAPI()
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
#redis_client = None


#=================================================== –î–ï–ö–õ–ê–†–ê–¶–Ü–Ø –§–£–ù–ö–¶–Ü–á "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ PostgreSQL" 0
async def get_connection():
    print(f"–í–•–Ü–î –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö")
    return await asyncpg.connect(DATABASE_URL)

#=================================================== –î–ï–ö–õ–ê–†–ê–¶–Ü–Ø –§–£–ù–ö–¶–Ü–á "–í–∏–≤–µ–¥–µ–Ω–Ω—è –≤ –¢–ï–õ–ï–ì–†–ê–ú –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏—Ö —Ñ—Ä–∞–∑" 0
async def send_phrase(conn, bot, chat_id, db_user_id, phrase_column: str, prefix: str = ""):
    query = f"SELECT {phrase_column} FROM translated_phrases WHERE user_id = $1 ORDER BY id DESC LIMIT 1"
    try:
        row = await conn.fetchrow(query, db_user_id)
        print(f"row {phrase_column}: {row}")
        text = row[phrase_column] if row and row[phrase_column] else None
        if text:
            await bot.send_message(chat_id=chat_id, text=prefix + text)
    except Exception as e:
        print(f"‚ùå Error fetching {phrase_column}: {e}")


#=================================================== –î–ï–ö–õ–ê–†–ê–¶–Ü–Ø –§–£–ù–ö–¶–Ü–á "–í–∏–∫–ª–∏–∫ OpenAI API"
async def query_openai_chat(messages: list[dict]) -> str:
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ OpenAI API: {e}"

#=================================================== –û–±—Ä–æ–±–∫–∞ Telegram webhook
@app.post("/webhook")
async def telegram_webhook(request: Request):
    print(f"–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞")
    data = await request.json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_text = message.get("text", "")
    from_user = message.get("from", {})

    user_id = from_user.get("id")
    username = from_user.get("username")
    first_name = from_user.get("first_name", "")
    last_name = from_user.get("last_name", "")
    full_name = f"{first_name} {last_name}".strip()

    mark = 0
    #-------------------------- –†–æ–±–æ—Ç–∞ –∑ –±–∞–∑–æ—é (–≤–∏–ª—É—á–µ–Ω–æ):
    conn = await get_connection() #++++++++++++++++++++++ –í–ò–ö–õ–ò–ö –§–£–ù–ö–¶–Ü–á "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ PostgreSQL" 0 +++++++++++++++++++
    try:
        #///////////////////////////////////////// –¢–ï–°–¢ –ù–ê –ü–ï–†–®–ò–ô –í–•–Ü–î –í –ë–û–¢–ê //////////////////////////////////////////////
        print("–¢–ï–°–¢ –ù–ê –ü–ï–†–®–ò–ô –í–•–Ü–î –í –ë–û–¢–ê")
        # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –≤ —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á user_id –≤ –ø–æ–ª—ñ —Ç–∞–±–ª–∏—Ü—ñ telegram_id. existing_user - —Ü–µ –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω—å –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        existing_user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id)

        # –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ telegram_id, username, full_name –æ—Ç—Ä–∏–º–∞–Ω–∏–º–∏ –∑ —Ç–µ–ª–µ–≥—Ä–∞–º—É –¥–∞–Ω–∏–º–∏ user_id, username, full_name
        if user_id is not None:
            if not existing_user:
                await conn.execute(
                    "INSERT INTO users (telegram_id, username, full_name) VALUES ($1, $2, $3)",
                    user_id, username, full_name
                )
                await bot.send_message(chat_id=chat_id, text="üëã Welcome! You are our new user.")
                mark = 1
        else:
            print("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—Å—Ç–∞–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: user_id = None")
            return {"status": "skipped_null_user"}
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        db_user_id = existing_user["id"] if existing_user else (await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id))["id"]


        command_value = await conn.fetchval(
            "SELECT command FROM user_commands WHERE user_id = $1",
            db_user_id
        )
        print(f"Current command: {command_value}")


        #////////////////////////////// –û–ë–†–û–ë–ö–ê –†–ï–°–ü–û–ù–°–£ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ü–†–û –ú–û–í–£ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø ////////////////////////////////////
        if command_value == 'language':
            print(f"in body language")

            messages = [
                {"role": "system", "content": "You are a language conversion service."},
                {
                    "role": "user",
                    "content": f'Provide the ISO 639-2 three-letter code for this language: "{user_text}". Return only the code, without additional words.'
                }
            ]
        
            # Get response from OpenAI in English
            language_code = await query_openai_chat(messages)

            print(f"language_code: {language_code}")                                        
            language_code = language_code.strip().lower()
        
            # Validate the code
            if len(language_code) == 3 and language_code.isalpha() and language_code != 'sms' :
                # Save to DB
                await conn.execute(
                    "UPDATE users SET language = $1 WHERE id = $2",
                    language_code, db_user_id
                )
                await bot.send_message(chat_id=chat_id, text=f"‚úÖ Language saved: {language_code}")


                
            else:
                #await bot.send_message(chat_id=chat_id, text=f"‚ùå Invalid language receive")
                pass

            mark = 1

        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        #//////////////////////////////////// –û–ë–†–û–ë–ö–ê –†–ï–°–ü–û–ù–°–£ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ü–†–û –Ü–ú–Ø ///////////////////////////////////////////
        if command_value == 'name':
            print(f"in body name: {user_text}")
            await conn.execute(
                "UPDATE users SET name = $1 WHERE id = $2",
                user_text, db_user_id
            )

            row = await conn.fetchrow(
                "SELECT phrase_2 FROM translated_phrases WHERE user_id = $1 ORDER BY id DESC LIMIT 1",
                db_user_id
            )
            print(f"row name_1: {row}")
            text_phrase_2 = row["phrase_2"] if row else None
            text_phrase_2="‚úÖ "+ text_phrase_2
            await bot.send_message(chat_id=chat_id, text=text_phrase_2)

            send_phrase(conn, bot, chat_id, db_user_id, "phrase_2", "‚úÖ " )
            
            await conn.execute(
                "UPDATE user_commands SET command = 'none' WHERE user_id = $1",
                db_user_id
            )
            mark = 1
        
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        #//////////////////////////////////// –û–ë–†–û–ë–ö–ê –†–ï–°–ü–û–ù–°–£ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ü–†–û –ö–†–ê–á–ù–£ ///////////////////////////////////////////
        if command_value == 'country':
            print(f"in body country: {user_text}")
            
            messages = [
                {"role": "system", "content": "You are a country code conversion service."},
                {
                    "role": "user",
                    "content": f'Provide the ISO 3166-1 alpha-3 code for this country: "{user_text}". Return only the code, in uppercase, without additional text.'
                }
            ]
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–¥ –∫—Ä–∞—ó–Ω–∏
            country_code = await query_openai_chat(messages)
            
            print(f"country_code: {country_code}")
            country_code = country_code.strip().upper()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ü–µ –¥—ñ–π—Å–Ω–∏–π –∫–æ–¥
            if len(country_code) == 3 and country_code.isalpha():
                await conn.execute(
                    "UPDATE users SET country = $1 WHERE id = $2",
                    country_code, db_user_id
                )
    
                row = await conn.fetchrow(
                    "SELECT phrase_5 FROM translated_phrases WHERE user_id = $1 ORDER BY id DESC LIMIT 1",
                    db_user_id
                )
                print(f"row country_1: {row}")
                text_phrase_5 = row["phrase_5"] if row else None
                text_phrase_5="‚úÖ "+ text_phrase_5
                await bot.send_message(chat_id=chat_id, text=text_phrase_5)
                await conn.execute(
                    "UPDATE user_commands SET command = 'none' WHERE user_id = $1",
                    db_user_id
                )
            else:
                row = await conn.fetchrow(
                    "SELECT phrase_6 FROM translated_phrases WHERE user_id = $1 ORDER BY id DESC LIMIT 1",
                    db_user_id
                )
                text_phrase_6 = row["phrase_6"] if row else None
                text_phrase_6="‚úÖ "+ text_phrase_6
                await bot.send_message(chat_id=chat_id, text=text_phrase_6)

            mark = 1

            


        
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        #/////////////////////// –û–ë–†–û–ë–ö–ê –†–ï–°–ü–û–ù–°–£ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ –°–ü–Ü–í–†–û–ó–ú–û–í–ù–ò–ö–ê //////////////////////////////////////
        if command_value == 'new_dialogue':
            print(f"in body dialogue: {user_text}")

            if user_text.lower() in ("yes", "y"):
                #–∞–≤—Ç–æ–º–∞—Ç—á–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞
                existing_profile = await conn.fetchrow("SELECT * FROM simulated_personas WHERE user_id = $1", db_user_id)
                if not existing_profile:
        
                    init_msg = await bot.send_message(chat_id=chat_id, text="‚úÖ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –í–∞—à–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞..")
                    profile_reference = {
                          "name": "Mariam",
                          "age": 24,
                          "country": "Egypt",
                          "difficulty_level": "1‚Äì5",
                          "religious_context": "muslim",
                          "personality": "Skeptical but emotionally open",
                          "barriers": ["God and suffering", "trust in religion"],
                          "openness": "Medium",
                          "goal": "To see if God is real and personal",
                          "big_five_traits": {
                                "openness": "high",
                                "conscientiousness": "medium",
                                "extraversion": "low",
                                "agreeableness": "medium",
                                "neuroticism": "high"
                          },
                          "temperament": "Melancholic",
                          "worldview_and_values": ["Humanism", "Skepticism"],
                          "beliefs": ["Religion is man-made", "God may exist but is distant"],
                          "motivation_and_goals": ["Find meaning after loss", "Reconnect with hope"],
                          "background": "Grew up in nominal faith, lost friend in accident",
                          "erikson_stage": "Young adulthood ‚Äî Intimacy vs. Isolation",
                          "emotional_intelligence": "Moderate",
                          "thinking_style": "Analytical with emotional interference",
                          "biological_factors": ["Sleep-deprived", "Hormonal imbalance"],
                          "social_context": ["Urban Egyptian culture", "Peers secular"],
                          "enneagram": "Type 4 ‚Äî Individualist",
                          "disc_profile": "C ‚Äî Conscientious",
                          "stress_tolerance": "Low",
                          "self_image": "Feels broken, searching for healing",
                          "cognitive_biases": ["Confirmation bias", "Negativity bias"],
                          "attachment_style": "Anxious-preoccupied",
                          "religion": "Nominal Christian",
                          "trauma_history": "Friend's death in accident ‚Äî unresolved",
                          "stress_level": "High",
                          "habits": ["Night owl", "Avoids social events"],
                          "why_contacted_us": "Saw Christian video that made her cry",
                          "digital_behavior": ["Active on Instagram", "Searches for spiritual content"],
                          "peer_pressure": ["Friends mock faith"],
                          "attachment_history": "Emotionally distant parents (based on Bowlby theory)",
                          "culture": "Middle Eastern / Egyptian",
                          "neuroprofile": "Sensitive limbic response",
                          "meta_programs": ["Away-from motivation", "External validation"],
                          "philosophical_views": ["Existentialism", "Skepticism"]
                    }
                    messages = [
                        {
                            "role": "system",
                            "content": "–¢–∏ ‚Äî –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ –≤–∏–≥–∞–¥–∞–Ω–∏—Ö –ª—é–¥–µ–π."
                        },
                        {
                            "role": "user",
                            "content": f"""–ó–≥–µ–Ω–µ—Ä—É–π –Ω–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞ —Ñ–æ—Ä–º–∞—Ç —è–∫ –≤ –Ω–∞–¥–∞–Ω–æ–º—É –Ω–∏–∂—á–µ –ø—Ä–∏–∫–ª–∞–¥—ñ –ø—Ä–æ—Ñ—ñ–ª—é, –∞–ª–µ –∑ –Ω–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏, —è–∫—ñ –ª–æ–≥—ñ—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –ø–æ–ª—è–º.
                    
                    –û—Å—å –ø—Ä–∏–∫–ª–∞–¥ –ø—Ä–æ—Ñ—ñ–ª—é:
                    {json.dumps(profile_reference, ensure_ascii=False, indent=2)}
                    
                    –£ –∑–Ω–∞—á–µ–Ω–Ω—ñ –∫–ª—é—á–∞ `difficulty_level` –≤ –Ω–æ–≤–æ–º—É –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ –∑–∞–º—ñ–Ω–∏ —Ü–∏—Ñ—Ä—É –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, —è–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç—ñ–π —Ü–∏—Ñ—Ä—ñ —Ä–∞–∑–æ–º –∑ —Ü–∏—Ñ—Ä–æ—é –∑ —Ü—å–æ–≥–æ —Å–ø–∏—Å–∫—É:
                      1 ‚Äî Open, with a mild spiritual inquiry
                      2 ‚Äî Doubtful, searching, but with barriers
                      3 ‚Äî Emotionally wounded, closed-off, critical
                      4 ‚Äî Hostile or apathetic, with negative personal experience
                      5 ‚Äî Provocative, aggressive, theologically well-versed
                    
                    –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–∞–π —É —Ñ–æ—Ä–º–∞—Ç—ñ **JSON**, –±–µ–∑ –∂–æ–¥–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å.
                    –ë–µ–∑ –∫–æ–¥—É markdown, —Ç—ñ–ª—å–∫–∏ —á–∏—Å—Ç–∏–π JSON."""
                        }
                    ]

                    response = await query_openai_chat(messages=messages)
                    
                    # –ü–∞—Ä—Å–∏–º–æ json –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —á–∞—Ç—É
                    try:
                        persona = json.loads(response)
                    except Exception as e:
                        await bot.send_message(chat_id=chat_id, text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
                        return {"status": "error_parsing_profile"}
    
                    # –í—Å—Ç–∞–≤–ª—è—î–º–æ –≤ –±–∞–∑—É
                    await conn.execute(
                        """
                        INSERT INTO simulated_personas (
                            user_id, name, age, country, difficulty_level, religious_context, personality,
                            barriers, openness, goal, big_five_traits, temperament, worldview_and_values,
                            beliefs, motivation_and_goals, background, erikson_stage, emotional_intelligence,
                            thinking_style, biological_factors, social_context, enneagram, disc_profile,
                            stress_tolerance, self_image, cognitive_biases, attachment_style, religion,
                            trauma_history, stress_level, habits, why_contacted_us, digital_behavior,
                            peer_pressure, attachment_history, culture, neuroprofile, meta_programs, philosophical_views
                        ) VALUES (
                            $1, $2, $3, $4, $5, $6, $7,
                            $8, $9, $10, $11, $12, $13,
                            $14, $15, $16, $17, $18,
                            $19, $20, $21, $22, $23,
                            $24, $25, $26, $27, $28,
                            $29, $30, $31, $32, $33,
                            $34, $35, $36, $37, $38, $39
                        )
                        """,
                        db_user_id,
                        persona.get("name"),
                        persona.get("age"),
                        persona.get("country"),
                        persona.get("difficulty_level"),
                        persona.get("religious_context"),
                        persona.get("personality"),
                        persona.get("barriers"),
                        persona.get("openness"),
                        persona.get("goal"),
                        json.dumps(persona.get("big_five_traits")),
                        persona.get("temperament"),
                        persona.get("worldview_and_values"),
                        persona.get("beliefs"),
                        persona.get("motivation_and_goals"),
                        persona.get("background"),
                        persona.get("erikson_stage"),
                        persona.get("emotional_intelligence"),
                        persona.get("thinking_style"),
                        persona.get("biological_factors"),
                        persona.get("social_context"),
                        persona.get("enneagram"),
                        persona.get("disc_profile"),
                        persona.get("stress_tolerance"),
                        persona.get("self_image"),
                        persona.get("cognitive_biases"),
                        persona.get("attachment_style"),
                        persona.get("religion"),
                        persona.get("trauma_history"),
                        persona.get("stress_level"),
                        persona.get("habits"),
                        persona.get("why_contacted_us"),
                        persona.get("digital_behavior"),
                        persona.get("peer_pressure"),
                        persona.get("attachment_history"),
                        persona.get("culture"),
                        persona.get("neuroprofile"),
                        persona.get("meta_programs"),
                        persona.get("philosophical_views"),
                    )
                    await init_msg.delete()
                    await bot.send_message(chat_id=chat_id, text="‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –í–∞—à–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")    
                    await conn.execute(
                        "UPDATE user_commands SET command = 'none' WHERE user_id = $1",
                        db_user_id
                    )
                else:
                    await bot.send_message(chat_id=chat_id, text="‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –í–∞—à–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–æ–¥–æ–≤–∂–∏–º–æ –¥—ñ–∞–ª–æ–≥.")
                    await conn.execute(
                        "UPDATE user_commands SET command = 'none' WHERE user_id = $1",
                        db_user_id
                    )
                    
                mark = 1
            else:
                row = await conn.fetchrow(
                    "SELECT phrase_7 FROM translated_phrases WHERE user_id = $1 ORDER BY id DESC LIMIT 1",
                    db_user_id
                )
                print(f"row seeker: {row}")
                text_phrase_7 = row["phrase_7"] if row else None
                text_phrase_7="‚úÖ "+ text_phrase_7
                await bot.send_message(chat_id=chat_id, text=text_phrase_7)
                await conn.execute(
                    "UPDATE user_commands SET command = 'new_handle_dialogue' WHERE user_id = $1",
                    db_user_id
                )
                return {"status": "waiting_language"}




        
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        #/////////////////////// –û–ë–†–û–ë–ö–ê –†–ï–°–ü–û–ù–°–£ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ –°–ü–Ü–í–†–û–ó–ú–û–í–ù–ò–ö–ê //////////////////////////////////////
        if command_value == 'new_handle_dialogue':
            print(f"in body handle dialogue: {user_text}")

            #–∞–≤—Ç–æ–º–∞—Ç—á–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—á–∏–∫—É–≤–∞–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞
            existing_profile = await conn.fetchrow("SELECT * FROM simulated_personas WHERE user_id = $1", db_user_id)
            if not existing_profile:
    
                init_msg = await bot.send_message(chat_id=chat_id, text="‚úÖ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –í–∞—à–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞..")
                profile_reference = {
                      "name": "Mariam",
                      "age": 24,
                      "country": "Egypt",
                      "difficulty_level": "1‚Äì5",
                      "religious_context": "muslim",
                      "personality": "Skeptical but emotionally open",
                      "barriers": ["God and suffering", "trust in religion"],
                      "openness": "Medium",
                      "goal": "To see if God is real and personal",
                      "big_five_traits": {
                            "openness": "high",
                            "conscientiousness": "medium",
                            "extraversion": "low",
                            "agreeableness": "medium",
                            "neuroticism": "high"
                      },
                      "temperament": "Melancholic",
                      "worldview_and_values": ["Humanism", "Skepticism"],
                      "beliefs": ["Religion is man-made", "God may exist but is distant"],
                      "motivation_and_goals": ["Find meaning after loss", "Reconnect with hope"],
                      "background": "Grew up in nominal faith, lost friend in accident",
                      "erikson_stage": "Young adulthood ‚Äî Intimacy vs. Isolation",
                      "emotional_intelligence": "Moderate",
                      "thinking_style": "Analytical with emotional interference",
                      "biological_factors": ["Sleep-deprived", "Hormonal imbalance"],
                      "social_context": ["Urban Egyptian culture", "Peers secular"],
                      "enneagram": "Type 4 ‚Äî Individualist",
                      "disc_profile": "C ‚Äî Conscientious",
                      "stress_tolerance": "Low",
                      "self_image": "Feels broken, searching for healing",
                      "cognitive_biases": ["Confirmation bias", "Negativity bias"],
                      "attachment_style": "Anxious-preoccupied",
                      "religion": "Nominal Christian",
                      "trauma_history": "Friend's death in accident ‚Äî unresolved",
                      "stress_level": "High",
                      "habits": ["Night owl", "Avoids social events"],
                      "why_contacted_us": "Saw Christian video that made her cry",
                      "digital_behavior": ["Active on Instagram", "Searches for spiritual content"],
                      "peer_pressure": ["Friends mock faith"],
                      "attachment_history": "Emotionally distant parents (based on Bowlby theory)",
                      "culture": "Middle Eastern / Egyptian",
                      "neuroprofile": "Sensitive limbic response",
                      "meta_programs": ["Away-from motivation", "External validation"],
                      "philosophical_views": ["Existentialism", "Skepticism"]
                }

                messages = [
                    {
                        "role": "system",
                        "content": "–¢–∏ ‚Äî –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ –≤–∏–≥–∞–¥–∞–Ω–∏—Ö –ª—é–¥–µ–π."
                    },
                    {
                        "role": "user",
                        "content": f"""–ó–≥–µ–Ω–µ—Ä—É–π –Ω–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞ —Ñ–æ—Ä–º–∞—Ç —è–∫ –≤ –Ω–∞–¥–∞–Ω–æ–º—É –Ω–∏–∂—á–µ –ø—Ä–∏–∫–ª–∞–¥—ñ –ø—Ä–æ—Ñ—ñ–ª—é, –∞–ª–µ –∑ –Ω–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏, —è–∫—ñ –ª–æ–≥—ñ—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –ø–æ–ª—è–º.
                
                –û—Å—å –ø—Ä–∏–∫–ª–∞–¥ –ø—Ä–æ—Ñ—ñ–ª—é:
                {json.dumps(profile_reference, ensure_ascii=False, indent=2)}
                
                –£ –∑–Ω–∞—á–µ–Ω–Ω—ñ –∫–ª—é—á–∞ `difficulty_level` –≤ –Ω–æ–≤–æ–º—É –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ –∑–∞–º—ñ–Ω–∏ —Ü–∏—Ñ—Ä—É –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, —è–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç—ñ–π —Ü–∏—Ñ—Ä—ñ —Ä–∞–∑–æ–º –∑ —Ü–∏—Ñ—Ä–æ—é –∑ —Ü—å–æ–≥–æ —Å–ø–∏—Å–∫—É:
                  1 ‚Äî Open, with a mild spiritual inquiry
                  2 ‚Äî Doubtful, searching, but with barriers
                  3 ‚Äî Emotionally wounded, closed-off, critical
                  4 ‚Äî Hostile or apathetic, with negative personal experience
                  5 ‚Äî Provocative, aggressive, theologically well-versed

                –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é –≤—Ä–∞—Ö—É–π –±—É–¥—å –ª–∞—Å–∫–∞ –æ—Å—å —Ü—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è: {user_text}.

                
                –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–∞–π —É —Ñ–æ—Ä–º–∞—Ç—ñ **JSON**, –±–µ–∑ –∂–æ–¥–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å.
                –ë–µ–∑ –∫–æ–¥—É markdown, —Ç—ñ–ª—å–∫–∏ —á–∏—Å—Ç–∏–π JSON."""
                    }
                ]


                
                response = await query_openai_chat(messages=messages)
                
                # –ü–∞—Ä—Å–∏–º–æ json –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —á–∞—Ç—É
                try:
                    persona = json.loads(response)
                except Exception as e:
                    await bot.send_message(chat_id=chat_id, text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
                    return {"status": "error_parsing_profile"}

                # –í—Å—Ç–∞–≤–ª—è—î–º–æ –≤ –±–∞–∑—É
                await conn.execute(
                    """
                    INSERT INTO simulated_personas (
                        user_id, name, age, country, difficulty_level, religious_context, personality,
                        barriers, openness, goal, big_five_traits, temperament, worldview_and_values,
                        beliefs, motivation_and_goals, background, erikson_stage, emotional_intelligence,
                        thinking_style, biological_factors, social_context, enneagram, disc_profile,
                        stress_tolerance, self_image, cognitive_biases, attachment_style, religion,
                        trauma_history, stress_level, habits, why_contacted_us, digital_behavior,
                        peer_pressure, attachment_history, culture, neuroprofile, meta_programs, philosophical_views
                    ) VALUES (
                        $1, $2, $3, $4, $5, $6, $7,
                        $8, $9, $10, $11, $12, $13,
                        $14, $15, $16, $17, $18,
                        $19, $20, $21, $22, $23,
                        $24, $25, $26, $27, $28,
                        $29, $30, $31, $32, $33,
                        $34, $35, $36, $37, $38, $39
                    )
                    """,
                    db_user_id,
                    persona.get("name"),
                    persona.get("age"),
                    persona.get("country"),
                    persona.get("difficulty_level"),
                    persona.get("religious_context"),
                    persona.get("personality"),
                    persona.get("barriers"),
                    persona.get("openness"),
                    persona.get("goal"),
                    json.dumps(persona.get("big_five_traits")),
                    persona.get("temperament"),
                    persona.get("worldview_and_values"),
                    persona.get("beliefs"),
                    persona.get("motivation_and_goals"),
                    persona.get("background"),
                    persona.get("erikson_stage"),
                    persona.get("emotional_intelligence"),
                    persona.get("thinking_style"),
                    persona.get("biological_factors"),
                    persona.get("social_context"),
                    persona.get("enneagram"),
                    persona.get("disc_profile"),
                    persona.get("stress_tolerance"),
                    persona.get("self_image"),
                    persona.get("cognitive_biases"),
                    persona.get("attachment_style"),
                    persona.get("religion"),
                    persona.get("trauma_history"),
                    persona.get("stress_level"),
                    persona.get("habits"),
                    persona.get("why_contacted_us"),
                    persona.get("digital_behavior"),
                    persona.get("peer_pressure"),
                    persona.get("attachment_history"),
                    persona.get("culture"),
                    persona.get("neuroprofile"),
                    persona.get("meta_programs"),
                    persona.get("philosophical_views"),
                )
                await init_msg.delete()
                await bot.send_message(chat_id=chat_id, text="‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –í–∞—à–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")    
                await conn.execute(
                    "UPDATE user_commands SET command = 'none' WHERE user_id = $1",
                    db_user_id
                )
            else:
                await bot.send_message(chat_id=chat_id, text="‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –í–∞—à–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–æ–¥–æ–≤–∂–∏–º–æ –¥—ñ–∞–ª–æ–≥.")
                await conn.execute(
                    "UPDATE user_commands SET command = 'none' WHERE user_id = $1",
                    db_user_id
                )
            mark = 1



        
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        existing_user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id)
        print(f"existing_user: {existing_user}")

        #=========================================== –§–£–ù–ö–¶–Ü–á –ü–û–®–£–ö–£ –ù–ï–í–ò–ó–ù–ê–ß–ï–ù–ò–• –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö =============================

        #////////////////////////////// –¢–ï–°–¢ –∫–æ–º—ñ—Ä–∫–∏ –ü–†–û –ú–û–í–£ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø ////////////////////////////////////
        if not existing_user["language"]:
            print(f"–¢–µ—Å—Ç –ø—É—Å—Ç–æ—ó –∫–æ–º—ñ—Ä–∫–∏ –º–æ–≤–∏")
     
            await conn.execute("""
                INSERT INTO user_commands (user_id, command)
                VALUES ($1, $2)
                ON CONFLICT (user_id) DO UPDATE SET command = EXCLUDED.command
            """, db_user_id, "language")
        
            await bot.send_message(
                chat_id=chat_id,
                text="üî• Enter your language",
                parse_mode="Markdown"
            )
            return {"status": "waiting_language"}
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        #////////////////////////////// –¢–ï–°–¢ –∫–æ–º—ñ—Ä–∫–∏ –í –¢–ê–ë–õ–ò–¶–Ü –ü–ï–†–ï–ö–õ–ê–î–Ü–í (–∑ –º–∏—Ç—Ç—î–≤–∏–º –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è–º) //////////////////////////
        row = await conn.fetchrow(
            "SELECT 1 FROM translated_phrases WHERE user_id = $1 AND phrase_1 IS NOT NULL",
            db_user_id
        )
        
        if row:
            print("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î —ñ –ø–æ–ª–µ phrase_1 –∑–∞–ø–æ–≤–Ω–µ–Ω–µ")
        else:
            print(f"–¢–µ—Å—Ç –ø—É—Å—Ç–æ—ó –∫–æ–º—ñ—Ä–∫–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É")
            print("‚ùå –ê–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î, –∞–±–æ –ø–æ–ª–µ language –ø–æ—Ä–æ–∂–Ω—î")
            #await bot.send_message(chat_id=chat_id, text=f"‚úÖ Switching to your language of communication.")
                

                    
            # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏
            row = await conn.fetchrow("SELECT language FROM users WHERE id = $1", db_user_id)
            language = row["language"] if row else "eng"
            
            # –ù–∞–±—ñ—Ä –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Ñ—Ä–∞–∑
            phrases = (
                "Please enter your name.", # - phrase_1 (
                "Name saved.", # - phrase_2
                "Invalid input", # - phrase_3
                "Which country are you from?", # - phrase_4
                "Country name saved.", # - phrase_5
                "Would you like me to automatically generate the characteristics of your conversation partner?", # - phrase_6
                "Please describe your conversation partner.", # - phrase_7
                "Conversation partner's profile generated.", # - phrase_8
                "Let's chat!", # - phrase_9
                "Conversation partner's profile generated.", # - phrase_10
                "Conversation partner's profile generated.", # - phrase_11
                "Conversation partner's profile generated.", # - phrase_12
                "Conversation partner's profile generated.", # - phrase_13
                "Conversation partner's profile generated.", # - phrase_14
                "Conversation partner's profile generated." # - phrase_15
            )
                            
            # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç
            prompt = (
                f"Translate the following English phrases into {language}. "
                "Return only the translations, one per line, in the same order. "
                "Do not include the original English text, any explanations, or formatting.\n\n" +
                "\n".join(phrases)
            )
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è OpenAI
            messages = [
                {"role": "system", "content": "You are a translation engine. Respond with only the translated phrases, no explanations, no original text, and no formatting."},
                {"role": "user", "content": prompt}
            ]
    
    
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç
            response_text = await query_openai_chat(messages)
    
            print(f"Text_from_GPT : {response_text}")
            
            # –†–æ–∑–±–∏—Ä–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∫–æ—Ä—Ç–µ–∂
            translated_phrases = tuple(
                line.strip()
                for line in response_text.strip().split("\n")
                if line.strip()  # –≤—ñ–¥–∫–∏–¥–∞—î–º–æ –ø—É—Å—Ç—ñ —Ä—è–¥–∫–∏
            )
    
            print(f"translated_phrases : {translated_phrases}")
    
    
            # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –¥–æ 15 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ None, —è–∫—â–æ –º–µ–Ω—à–µ
            translated_phrases = list(translated_phrases)
            while len(translated_phrases) < 15:
                translated_phrases.append(None)
    
    
            
            # –í–Ω–µ—Å–µ–Ω–Ω—è —É —Ç–∞–±–ª–∏—Ü—é translated_phrases (—Ä–µ—à—Ç–∞ —Ñ—Ä–∞–∑ ‚Äî NULL)
            await conn.execute("""
                INSERT INTO translated_phrases (
                    user_id,
                    phrase_1, phrase_2, phrase_3, phrase_4, phrase_5,
                    phrase_6, phrase_7, phrase_8, phrase_9, phrase_10,
                    phrase_11, phrase_12, phrase_13, phrase_14, phrase_15
                ) VALUES (
                    $1, $2, $3, $4, $5,
                    $6, $7, $8, $9, $10,
                    $11, $12, $13, $14, $15, $16
                )
                ON CONFLICT (user_id) DO UPDATE SET
                phrase_1 = EXCLUDED.phrase_1,
                phrase_2 = EXCLUDED.phrase_2,
                phrase_3 = EXCLUDED.phrase_3,
                phrase_4 = EXCLUDED.phrase_4,
                phrase_5 = EXCLUDED.phrase_5,
                phrase_6 = EXCLUDED.phrase_6,
                phrase_7 = EXCLUDED.phrase_7,
                phrase_8 = EXCLUDED.phrase_8,
                phrase_9 = EXCLUDED.phrase_9,
                phrase_10 = EXCLUDED.phrase_10,
                phrase_11 = EXCLUDED.phrase_11,
                phrase_12 = EXCLUDED.phrase_12,
                phrase_13 = EXCLUDED.phrase_13,
                phrase_14 = EXCLUDED.phrase_14,
                phrase_15 = EXCLUDED.phrase_15
            """, db_user_id, *translated_phrases[:15])
    
    
      
            await conn.execute(
                "UPDATE user_commands SET command = 'none' WHERE user_id = $1",
                db_user_id
            )
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        #/////////////////////////////////////// –¢–ï–°–¢ –∫–æ–º—ñ—Ä–∫–∏ –î–ï –í–ö–ê–ó–ê–ù–û –Ü–ú–Ø ////////////////////////////////////////////////
        if not existing_user["name"]:
            print(f"–¢–µ—Å—Ç –ø—É—Å—Ç–æ—ó –∫–æ–º—ñ—Ä–∫–∏ —ñ–º—è")


            await conn.execute("""
                INSERT INTO user_commands (user_id, command)
                VALUES ($1, $2)
                ON CONFLICT (user_id) DO UPDATE SET command = EXCLUDED.command
            """, db_user_id, "name")



            row = await conn.fetchrow(
                "SELECT phrase_1 FROM translated_phrases WHERE user_id = $1 ORDER BY id DESC LIMIT 1",
                db_user_id
            )
            print(f"row name: {row}")
            
            text_phrase_1 = row["phrase_1"] if row else None
            text_phrase_1="üî• "+ text_phrase_1
            await bot.send_message(
                chat_id=chat_id,
                text=text_phrase_1,
                parse_mode="Markdown"
            )
            return {"status": "waiting_name"}

        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        #/////////////////////////////////////// –¢–ï–°–¢ –∫–æ–º—ñ—Ä–∫–∏ –î–ï –í–ö–ê–ó–ê–ù–û –ö–†–ê–á–ù–£ ////////////////////////////////////////////////
        if not existing_user["country"]:
            print(f"–¢–µ—Å—Ç –ø—É—Å—Ç–æ—ó –∫–æ–º—ñ—Ä–∫–∏ –∫—Ä–∞—ó–Ω–∏")


            await conn.execute("""
                INSERT INTO user_commands (user_id, command)
                VALUES ($1, $2)
                ON CONFLICT (user_id) DO UPDATE SET command = EXCLUDED.command
            """, db_user_id, "country")



            row = await conn.fetchrow(
                "SELECT phrase_4 FROM translated_phrases WHERE user_id = $1 ORDER BY id DESC LIMIT 1",
                db_user_id
            )
            print(f"row country: {row}")
            
            text_phrase_4 = row["phrase_4"] if row else None
            text_phrase_4="üî• "+ text_phrase_4
            await bot.send_message(
                chat_id=chat_id,
                text=text_phrase_4,
                parse_mode="Markdown"
            )
            return {"status": "waiting_country"}

        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        


        #/////////////////////////////////////// –ü–ò–¢–ê–ù–ù–Ø –ø—Ä–æ –†–£–ß–ù–ï –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –°–ü–Ü–í–†–û–ó–ú–û–í–ù–ò–ö–ê ////////////////////////////////
        if not existing_user["initial"]:
            print(f"–¢–µ—Å—Ç –ø—É—Å—Ç–æ—ó –∫–æ–º—ñ—Ä–∫–∏ initial")


            await conn.execute("""
                INSERT INTO user_commands (user_id, command)
                VALUES ($1, $2)
                ON CONFLICT (user_id) DO UPDATE SET command = EXCLUDED.command
            """, db_user_id, "new_dialogue")



            row = await conn.fetchrow(
                "SELECT phrase_6 FROM translated_phrases WHERE user_id = $1 ORDER BY id DESC LIMIT 1",
                db_user_id
            )
            print(f"new_dialogue: {row}")
            
            text_phrase_6 = row["phrase_6"] if row else None
            text_phrase_6="üî• "+ text_phrase_6
            await bot.send_message(
                chat_id=chat_id,
                text=text_phrase_6,
                parse_mode="Markdown"
            )
            await conn.execute(
                "UPDATE users SET initial = $1 WHERE id = $2",
                'pss', db_user_id
            )
            return {"status": "waiting_seeker_status"}

        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
        #/////////////////////////////////////// –ü–ò–¢–ê–ù–ù–Ø –ø—Ä–æ –†–£–ß–ù–ï –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –°–ü–Ü–í–†–û–ó–ú–û–í–ù–ò–ö–ê ////////////////////////////////
        if mark == 1:
            row = await conn.fetchrow(
                "SELECT phrase_9 FROM translated_phrases WHERE user_id = $1 ORDER BY id DESC LIMIT 1",
                db_user_id
            )
            print(f"new_dialogue: {row}")
            
            text_phrase_9 = row["phrase_9"] if row else None
            text_phrase_9="üî• "+ text_phrase_9
            await bot.send_message(
                chat_id=chat_id,
                text=text_phrase_9,
                parse_mode="Markdown"
            )
            return {"status": "data_updated"}
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    finally:
        await conn.close()


    return {"status": "ok"}
