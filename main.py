#==================================================== –Ü–º–ø–æ—Ä—Ç–∏ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
from fastapi import FastAPI, Request
from telegram import Bot
import os
import asyncpg
import redis.asyncio as redis
from openai import AsyncOpenAI
import json
import asyncio

print("–¢–ï–°–¢ –ù–ê –ü–ï–†–®–ò–ô –í–•–Ü–î –í –ë–û–¢–ê")

#=================================================== –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
DATABASE_URL = os.getenv("DATABASE_URL")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
#REDIS_URL = os.getenv("REDIS_URL")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, redis://:password@host:port

#=================================================== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
bot = Bot(token=TELEGRAM_TOKEN)
app = FastAPI()
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
#redis_client = None
ADMIN_IDS = [231319580]  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID

#=================================================== –î–ï–ö–õ–ê–†–ê–¶–Ü–Ø –ê–î–ú–Ü–ù–°–¨–ö–û–á –§–£–ù–ö–¶–Ü–á "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É" 0
def get_balance():
    # –ü–æ–≤–µ—Ä—Ç–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –±–∞–∑–∏, API —á–∏ –¥–µ –≤ —Ç–µ–±–µ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –±–∞–ª–∞–Ω—Å
    return 17.42

#=================================================== –î–ï–ö–õ–ê–†–ê–¶–Ü–Ø –§–£–ù–ö–¶–Ü–á "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ PostgreSQL" 0
async def get_connection():
    print(f"–í–•–Ü–î –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö")
    return await asyncpg.connect(DATABASE_URL)

#=================================================== –î–ï–ö–õ–ê–†–ê–¶–Ü–Ø –§–£–ù–ö–¶–Ü–á "–í–∏–≤–µ–¥–µ–Ω–Ω—è –≤ –¢–ï–õ–ï–ì–†–ê–ú –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏—Ö —Ñ—Ä–∞–∑" 0
async def send_phrase(conn, bot, chat_id, db_user_id, phrase_column: str, prefix: str = ""):
    query = f"SELECT {phrase_column} FROM translated_phrases WHERE user_id = $1 ORDER BY id DESC LIMIT 1"
    try:
        row = await conn.fetchrow(query, db_user_id)
        print(f"row {phrase_column}: {row}")
        text = row[phrase_column] if row and row[phrase_column] else None
        if text:
            feedback = await bot.send_message(chat_id=chat_id, text=prefix + text)
            return feedback
    except Exception as e:
        print(f"‚ùå Error fetching {phrase_column}: {e}")


#=================================================== –î–ï–ö–õ–ê–†–ê–¶–Ü–Ø –§–£–ù–ö–¶–Ü–á "–ó–±—ñ–ª—å—à–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å" 0
async def increment_message_count(conn, db_user_id):
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    row_id = await conn.fetchrow("""
        SELECT id FROM dialogues_stat
        WHERE user_id = $1
        ORDER BY started_at DESC
        LIMIT 1
    """, db_user_id)

    if not row_id:
        print("‚ùå No dialogue found for this user.")
        return None

    dialogue_id = row_id["id"]

    # –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
    row = await conn.fetchrow("""
        UPDATE dialogues_stat
        SET message_count = message_count + 1
        WHERE id = $1
        RETURNING message_count
    """, dialogue_id)

    if row:
        message_count = row["message_count"]
        print(f"‚úÖ Updated message_count: {message_count}, dialogue_id: {dialogue_id}")
        return message_count, dialogue_id
    else:
        print("‚ö†Ô∏è Dialogue ID found, but failed to update message_count.")
        return None


#=================================================== –î–ï–ö–õ–ê–†–ê–¶–Ü–Ø –§–£–ù–ö–¶–Ü–á "–†–ï–ó–Æ–ú–£–í–ê–ù–ù–Ø –≤—ñ–¥ —á–∞—Ç—É GPT" 0
async def summarize_dialogue(conn, dialogue_id, chat_id, db_user_id):
    # –í–∏—Ç—è–≥–Ω—É—Ç–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É
    rows = await conn.fetch(
        "SELECT role, message FROM dialogs WHERE id_dialogue = $1 ORDER BY created_at ASC",
        dialogue_id
    )

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥—ñ–∞–ª–æ–≥—É
    dialogue_text = "\n".join([f"{row['role'].capitalize()}: {row['message']}" for row in rows])


    row = await conn.fetchrow("SELECT language FROM users WHERE id = $1", db_user_id)
    if row:
        language = row["language"]
    else:
        language = 'eng'  # –∞–±–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

    # –°–∏—Å—Ç–µ–º–Ω–∏–π prompt —ñ–∑ —Ä–æ–ª–ª—é –ø—Å–∏—Ö–æ–ª–æ–≥–∞
    system_prompt = {
        "role": "system",
        "content": "You are an expert psychologist. Analyze the following dialogue carefully.Reply in the language specified by ISO 639-2: {language}"
    }

    # User prompt –∑ –ø—Ä–æ—Ö–∞–Ω–Ω—è–º –ø—Ä–æ —Ä–µ–∑—é–º—É–≤–∞–Ω–Ω—è
    user_prompt = {
        "role": "user",
        "content": (
            "Please summarize this conversation, focusing on whether openness was observed in the interlocutors during the dialogue."
            "How appropriate and non-intrusive were my attempts to engage the person in faith in God, and were these attempts successful?"
            "Was I able to lead the person to reflect on the topic of faith in God and following Him?\n\n"
            f"Dialogue:\n{dialogue_text}"
        )
    }

    messages = [system_prompt, user_prompt]

    # –í–∏–∫–ª–∏–∫ OpenAI API (–ø—Ä–∏–ø—É—Å–∫–∞—é, —â–æ —î —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü—ñ—è query_openai_chat)
    summary = await query_openai_chat(messages)

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —É Telegram
    await bot.send_message(chat_id=chat_id, text=summary)

    return summary




#=================================================== –î–ï–ö–õ–ê–†–ê–¶–Ü–Ø –§–£–ù–ö–¶–Ü–á "–í–∏–∫–ª–∏–∫ OpenAI API"
async def query_openai_chat(messages: list[dict]) -> str:
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ OpenAI API: {e}"

#=================================================== –û–±—Ä–æ–±–∫–∞ Telegram webhook
@app.post("/webhook")
async def telegram_webhook(request: Request):
    print(f"–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞")
    data = await request.json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_text = message.get("text", "")
    from_user = message.get("from", {})

    user_id = from_user.get("id")
    username = from_user.get("username")
    first_name = from_user.get("first_name", "")
    last_name = from_user.get("last_name", "")
    full_name = f"{first_name} {last_name}".strip()

    mark = 0
    #-------------------------- –†–æ–±–æ—Ç–∞ –∑ –±–∞–∑–æ—é (–≤–∏–ª—É—á–µ–Ω–æ):
    conn = await get_connection() #++++++++++++++++++++++ –í–ò–ö–õ–ò–ö –§–£–ù–ö–¶–Ü–á "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ PostgreSQL" 0 +++++++++++++++++++
    try:
        #///////////////////////////////////////// –¢–ï–°–¢ –ù–ê –ü–ï–†–®–ò–ô –í–•–Ü–î –í –ë–û–¢–ê //////////////////////////////////////////////
        print("–¢–ï–°–¢ –ù–ê –ü–ï–†–®–ò–ô –í–•–Ü–î –í –ë–û–¢–ê")
        # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –≤ —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á user_id –≤ –ø–æ–ª—ñ —Ç–∞–±–ª–∏—Ü—ñ telegram_id. existing_user - —Ü–µ –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω—å –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        existing_user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id)

        # –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ telegram_id, username, full_name –æ—Ç—Ä–∏–º–∞–Ω–∏–º–∏ –∑ —Ç–µ–ª–µ–≥—Ä–∞–º—É –¥–∞–Ω–∏–º–∏ user_id, username, full_name
        if user_id is not None:
            if not existing_user:
                await conn.execute(
                    "INSERT INTO users (telegram_id, username, full_name) VALUES ($1, $2, $3)",
                    user_id, username, full_name
                )
                await bot.send_message(chat_id=chat_id, text="üëã Welcome! You are our new user.")
                mark = 1
        else:
            print("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—Å—Ç–∞–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: user_id = None")
            return {"status": "skipped_null_user"}
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        db_user_id = existing_user["id"] if existing_user else (await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id))["id"]


        command_value = await conn.fetchval(
            "SELECT command FROM user_commands WHERE user_id = $1",
            db_user_id
        )
        print(f"Current command: {command_value}")


        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #//////////////////////////////////////////// –û–ë–†–û–ë–ö–ê –ê–î–ú–Ü–ù–°–¨–ö–ò–• –ö–û–ú–ê–ù–î ////////////////////////////////////////////
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if text == "/status":
            if user_id not in ADMIN_IDS:
                await bot.send_message(chat_id=chat_id, text="–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.")
                return {"ok": True}
    
            mem_used = 252451
            bal = get_balance()
            await bot.send_message(chat_id=chat_id,
                                   text=f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –ø–∞–º º—è—Ç—ñ: {mem_used} MB\n–ë–∞–ª–∞–Ω—Å: {bal} –≥—Ä–Ω")
    
        return {"ok": True}
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        #////////////////////////////// –û–ë–†–û–ë–ö–ê –†–ï–°–ü–û–ù–°–£ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ü–†–û –ú–û–í–£ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø ////////////////////////////////////
        if command_value == 'language':
            print(f"in body language")

            messages = [
                {"role": "system", "content": "You are a language conversion service."},
                {
                    "role": "user",
                    "content": f'Provide the ISO 639-2 three-letter code for this language: "{user_text}". Return only the code, without additional words.'
                }
            ]
        
            # Get response from OpenAI in English
            language_code = await query_openai_chat(messages)

            print(f"language_code: {language_code}")                                        
            language_code = language_code.strip().lower()
        
            # Validate the code
            if len(language_code) == 3 and language_code.isalpha() and language_code != 'sms' and language_code != 'xxx':
                # Save to DB
                await conn.execute(
                    "UPDATE users SET language = $1 WHERE id = $2",
                    language_code, db_user_id
                )
                #await bot.send_message(chat_id=chat_id, text=f"‚úÖ Language saved: {language_code}")
                
                await conn.execute(
                    "UPDATE user_commands SET command = 'none' WHERE user_id = $1",
                    db_user_id
                )

                
            else:
                #await bot.send_message(chat_id=chat_id, text=f"‚ùå Invalid language receive")
                pass

            mark = 1

        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        #//////////////////////////////////// –û–ë–†–û–ë–ö–ê –†–ï–°–ü–û–ù–°–£ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ü–†–û –Ü–ú–Ø ///////////////////////////////////////////
        if command_value == 'name':
            print(f"in body name: {user_text}")
            await conn.execute(
                "UPDATE users SET name = $1 WHERE id = $2",
                user_text, db_user_id
            )

            #await send_phrase(conn, bot, chat_id, db_user_id, "phrase_2", "‚úÖ ")

        
            await conn.execute(
                "UPDATE user_commands SET command = 'none' WHERE user_id = $1",
                db_user_id
            )
            mark = 1
        
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        #//////////////////////////////////// –û–ë–†–û–ë–ö–ê –†–ï–°–ü–û–ù–°–£ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ü–†–û –ö–†–ê–á–ù–£ ///////////////////////////////////////////
        if command_value == 'country':
            print(f"in body country: {user_text}")
            
            messages = [
                {"role": "system", "content": "You are a country code conversion service."},
                {
                    "role": "user",
                    "content": f'Provide the ISO 3166-1 alpha-3 code for this country: "{user_text}". Return only the code, in uppercase, without additional text.'
                }
            ]
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–¥ –∫—Ä–∞—ó–Ω–∏
            country_code = await query_openai_chat(messages)
            
            print(f"country_code: {country_code}")
            country_code = country_code.strip().upper()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ü–µ –¥—ñ–π—Å–Ω–∏–π –∫–æ–¥
            if len(country_code) == 3 and country_code.isalpha():
                await conn.execute(
                    "UPDATE users SET country = $1 WHERE id = $2",
                    country_code, db_user_id
                )
    
                #await send_phrase(conn, bot, chat_id, db_user_id, "phrase_5", "‚úÖ ")
                await conn.execute(
                    "UPDATE user_commands SET command = 'none' WHERE user_id = $1",
                    db_user_id
                )
            else:
                await send_phrase(conn, bot, chat_id, db_user_id, "phrase_3", "‚úÖ ")

            mark = 1

            


        
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                
        
        
        #/////////////////////////////////// –û–ë–†–û–ë–ö–ê –ü–ï–†–ï–†–ò–í–ê–ù–ù–Ø –ü–û–¢–û–ß–ù–û–ì–û –î–Ü–ê–õ–û–ì–£ //////////////////////////////////////////
        if user_text == "/new":
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            row_id = await conn.fetchrow("""
                SELECT id FROM dialogues_stat
                WHERE user_id = $1
                ORDER BY started_at DESC
                LIMIT 1
            """, db_user_id)
        
            if not row_id:
                print("‚ùå No dialogue found for this user.")
                return None
        
            dialogue_id = row_id["id"]

            row = await conn.fetchrow(
                "SELECT message_count FROM dialogues_stat WHERE id = $1",
                dialogue_id
            )
            if row:
                message_count = row["message_count"]
                print(f"üì® message_count for dialogue {dialogue_id}: {message_count}")
            else:
                print(f"‚ùå Dialogue with id {dialogue_id} not found.")
                return None

            await bot.send_message(chat_id=chat_id, text=" Vy vyjavyly bazannya perervaty potocny dialog stvoryvshy novy")
            if message_count >= 30:
                await bot.send_message(chat_id=chat_id, text="üëã U vas dostatno povidomlen dlya rezjumuvannya. Bazaete rezyumuvaty potochny dialog?")
                await conn.execute(
                    "UPDATE user_commands SET command = 'continue_new' WHERE user_id = $1",
                    db_user_id
                )
                return {"status": "commad_new"}

            await send_phrase(conn, bot, chat_id, db_user_id, "phrase_13", "‚úÖ ")
            await conn.execute(
                "UPDATE user_commands SET command = 'new_dialogue' WHERE user_id = $1",
                db_user_id
            )
            await send_phrase(conn, bot, chat_id, db_user_id, "phrase_6", "üî• ")
            return {"status": "commad_new"}

        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




        #/////////////////////////////////// –ü–†–û–î–û–í–ñ–ï–ù–ù–Ø –û–ë–†–û–ë–ö–ò –ü–ï–†–ï–†–ò–í–ê–ù–ù–Ø –î–Ü–ê–õ–û–ì–£ //////////////////////////////////////
        if command_value == 'continue_new':
            print(f"in body dialogue: {user_text}")
            
            row = await conn.fetchrow("SELECT language FROM users WHERE id = $1", db_user_id)
            if row:
                language = row["language"]
            else:
                language = 'eng'  # –∞–±–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            
            
            messages = [
                {
                    "role": "user",
                    "content": (
                        f"Determine whether the following phrase: {user_text} indicates agreement in the language specified by the ISO 639-2 code: {language}." 
                        f"Return the English word 'yes' if the phrase indicates agreement, or 'no' if it does not."
                        f"Return exactly yes or no as plain text, without any quotes or formatting."
                    )
                }
            ]
            user_answer = await query_openai_chat(messages)
            print(f"user_answer: {user_answer}")

            if user_answer.lower() in ("yes", "y"):
                # rezyumuvannya
                print(f"rezyumuvannya -----------------------------------")
                await summarize_dialogue(conn, dialogue_id, chat_id, db_user_id)
            await send_phrase(conn, bot, chat_id, db_user_id, "phrase_13", "‚úÖ ")
            await conn.execute(
                "UPDATE user_commands SET command = 'new_dialogue' WHERE user_id = $1",
                db_user_id
            )
            await send_phrase(conn, bot, chat_id, db_user_id, "phrase_6", "üî• ")
            return {"status": "commad_new"}
            
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        
        #/////////////////////// –û–ë–†–û–ë–ö–ê –†–ï–°–ü–û–ù–°–£ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ –°–ü–Ü–í–†–û–ó–ú–û–í–ù–ò–ö–ê //////////////////////////////////////
        if command_value == 'new_dialogue':
            print(f"in body dialogue: {user_text}")
            
            row = await conn.fetchrow("SELECT language FROM users WHERE id = $1", db_user_id)
            if row:
                language = row["language"]
            else:
                language = 'eng'  # –∞–±–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            
            
            messages = [
                {
                    "role": "user",
                    "content": (
                        f"Determine whether the following phrase: {user_text} indicates agreement in the language specified by the ISO 639-2 code: {language}." 
                        f"Return the English word 'yes' if the phrase indicates agreement, or 'no' if it does not."
                        f"Return exactly yes or no as plain text, without any quotes or formatting."
                    )
                }
            ]
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–¥ –∫—Ä–∞—ó–Ω–∏
            user_answer = await query_openai_chat(messages)
            print(f"user_answer: {user_answer}")

            if user_answer.lower() in ("yes", "y"):
                #–∞–≤—Ç–æ–º–∞—Ç—á–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞

        
                init_msg = await send_phrase(conn, bot, chat_id, db_user_id, "phrase_10", "‚úÖ ")
                profile_reference = {
                      "name": "Mariam",
                      "age": 24,
                      "country": "Egypt",
                      "difficulty_level": "1‚Äì5",
                      "religious_context": "muslim",
                      "personality": "Skeptical but emotionally open",
                      "barriers": ["God and suffering", "trust in religion"],
                      "openness": "Medium",
                      "goal": "To see if God is real and personal",
                      "big_five_traits": {
                            "openness": "high",
                            "conscientiousness": "medium",
                            "extraversion": "low",
                            "agreeableness": "medium",
                            "neuroticism": "high"
                      },
                      "temperament": "Melancholic",
                      "worldview_and_values": ["Humanism", "Skepticism"],
                      "beliefs": ["Religion is man-made", "God may exist but is distant"],
                      "motivation_and_goals": ["Find meaning after loss", "Reconnect with hope"],
                      "background": "Grew up in nominal faith, lost friend in accident",
                      "erikson_stage": "Young adulthood ‚Äî Intimacy vs. Isolation",
                      "emotional_intelligence": "Moderate",
                      "thinking_style": "Analytical with emotional interference",
                      "biological_factors": ["Sleep-deprived", "Hormonal imbalance"],
                      "social_context": ["Urban Egyptian culture", "Peers secular"],
                      "enneagram": "Type 4 ‚Äî Individualist",
                      "disc_profile": "C ‚Äî Conscientious",
                      "stress_tolerance": "Low",
                      "self_image": "Feels broken, searching for healing",
                      "cognitive_biases": ["Confirmation bias", "Negativity bias"],
                      "attachment_style": "Anxious-preoccupied",
                      "religion": "Nominal Christian",
                      "trauma_history": "Friend's death in accident ‚Äî unresolved",
                      "stress_level": "High",
                      "habits": ["Night owl", "Avoids social events"],
                      "why_contacted_us": "Saw Christian video that made her cry",
                      "digital_behavior": ["Active on Instagram", "Searches for spiritual content"],
                      "peer_pressure": ["Friends mock faith"],
                      "attachment_history": "Emotionally distant parents (based on Bowlby theory)",
                      "culture": "Middle Eastern / Egyptian",
                      "neuroprofile": "Sensitive limbic response",
                      "meta_programs": ["Away-from motivation", "External validation"],
                      "philosophical_views": ["Existentialism", "Skepticism"]
                }
                messages = [
                    {
                        "role": "system",
                        "content": "–¢–∏ ‚Äî –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ –≤–∏–≥–∞–¥–∞–Ω–∏—Ö –ª—é–¥–µ–π."
                    },
                    {
                        "role": "user",
                        "content": f"""–ó–≥–µ–Ω–µ—Ä—É–π –Ω–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞ —Ñ–æ—Ä–º–∞—Ç —è–∫ –≤ –Ω–∞–¥–∞–Ω–æ–º—É –Ω–∏–∂—á–µ –ø—Ä–∏–∫–ª–∞–¥—ñ –ø—Ä–æ—Ñ—ñ–ª—é, –∞–ª–µ –∑ –Ω–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏, —è–∫—ñ –ª–æ–≥—ñ—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –ø–æ–ª—è–º.
                
                –û—Å—å –ø—Ä–∏–∫–ª–∞–¥ –ø—Ä–æ—Ñ—ñ–ª—é:
                {json.dumps(profile_reference, ensure_ascii=False, indent=2)}
                
                –£ –∑–Ω–∞—á–µ–Ω–Ω—ñ –∫–ª—é—á–∞ `difficulty_level` –≤ –Ω–æ–≤–æ–º—É –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ –∑–∞–º—ñ–Ω–∏ —Ü–∏—Ñ—Ä—É –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, —è–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç—ñ–π —Ü–∏—Ñ—Ä—ñ —Ä–∞–∑–æ–º –∑ —Ü–∏—Ñ—Ä–æ—é –∑ —Ü—å–æ–≥–æ —Å–ø–∏—Å–∫—É:
                  1 ‚Äî Open, with a mild spiritual inquiry
                  2 ‚Äî Doubtful, searching, but with barriers
                  3 ‚Äî Emotionally wounded, closed-off, critical
                  4 ‚Äî Hostile or apathetic, with negative personal experience
                  5 ‚Äî Provocative, aggressive, theologically well-versed
                
                –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–∞–π —É —Ñ–æ—Ä–º–∞—Ç—ñ **JSON**, –±–µ–∑ –∂–æ–¥–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å.
                –ë–µ–∑ –∫–æ–¥—É markdown, —Ç—ñ–ª—å–∫–∏ —á–∏—Å—Ç–∏–π JSON."""
                    }
                ]

                response = await query_openai_chat(messages=messages)
                
                # –ü–∞—Ä—Å–∏–º–æ json –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —á–∞—Ç—É
                try:
                    persona = json.loads(response)
                except Exception as e:
                    await bot.send_message(chat_id=chat_id, text=f"‚ùå Parsing error: {e}")
                    return {"status": "error_parsing_profile"}

                # –í—Å—Ç–∞–≤–ª—è—î–º–æ –≤ –±–∞–∑—É
                # 1. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥ —ñ –≤–∏—Ç—è–≥—É—î–º–æ –π–æ–≥–æ id
                dialogue_row = await conn.fetchrow(
                    """
                    INSERT INTO dialogues_stat (user_id) VALUES ($1)
                    RETURNING id
                    """,
                    db_user_id
                )
                dialogue_id = dialogue_row["id"]
                
                # 2. –í—Å—Ç–∞–≤–ª—è—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∑ id_dialogue
                await conn.execute(
                    """
                    INSERT INTO simulated_personas (
                        user_id, name, age, country, difficulty_level, religious_context, personality,
                        barriers, openness, goal, big_five_traits, temperament, worldview_and_values,
                        beliefs, motivation_and_goals, background, erikson_stage, emotional_intelligence,
                        thinking_style, biological_factors, social_context, enneagram, disc_profile,
                        stress_tolerance, self_image, cognitive_biases, attachment_style, religion,
                        trauma_history, stress_level, habits, why_contacted_us, digital_behavior,
                        peer_pressure, attachment_history, culture, neuroprofile, meta_programs, philosophical_views,
                        id_dialogue
                    ) VALUES (
                        $1, $2, $3, $4, $5, $6, $7,
                        $8, $9, $10, $11, $12, $13,
                        $14, $15, $16, $17, $18,
                        $19, $20, $21, $22, $23,
                        $24, $25, $26, $27, $28,
                        $29, $30, $31, $32, $33,
                        $34, $35, $36, $37, $38, $39,
                        $40
                    )
                    """,
                    db_user_id,
                    persona.get("name"),
                    persona.get("age"),
                    persona.get("country"),
                    persona.get("difficulty_level"),
                    persona.get("religious_context"),
                    persona.get("personality"),
                    persona.get("barriers"),
                    persona.get("openness"),
                    persona.get("goal"),
                    json.dumps(persona.get("big_five_traits")),
                    persona.get("temperament"),
                    persona.get("worldview_and_values"),
                    persona.get("beliefs"),
                    persona.get("motivation_and_goals"),
                    persona.get("background"),
                    persona.get("erikson_stage"),
                    persona.get("emotional_intelligence"),
                    persona.get("thinking_style"),
                    persona.get("biological_factors"),
                    persona.get("social_context"),
                    persona.get("enneagram"),
                    persona.get("disc_profile"),
                    persona.get("stress_tolerance"),
                    persona.get("self_image"),
                    persona.get("cognitive_biases"),
                    persona.get("attachment_style"),
                    persona.get("religion"),
                    persona.get("trauma_history"),
                    persona.get("stress_level"),
                    persona.get("habits"),
                    persona.get("why_contacted_us"),
                    persona.get("digital_behavior"),
                    persona.get("peer_pressure"),
                    persona.get("attachment_history"),
                    persona.get("culture"),
                    persona.get("neuroprofile"),
                    persona.get("meta_programs"),
                    persona.get("philosophical_views"),
                    dialogue_id  # ‚Üê –¥–æ–¥–∞—î–º–æ —Å—é–¥–∏
                )
                
                await init_msg.delete()
                await send_phrase(conn, bot, chat_id, db_user_id, "phrase_8", "‚úÖ ")   
                await conn.execute(
                    "UPDATE user_commands SET command = 'none' WHERE user_id = $1",
                    db_user_id
                )
                    
                mark = 1
            else:
                await send_phrase(conn, bot, chat_id, db_user_id, "phrase_7", "‚úÖ ")
                await conn.execute(
                    "UPDATE user_commands SET command = 'new_handle_dialogue' WHERE user_id = $1",
                    db_user_id
                )
                return {"status": "waiting_language"}




        
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        #/////////////////////// –û–ë–†–û–ë–ö–ê –†–ï–°–ü–û–ù–°–£ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ –°–ü–Ü–í–†–û–ó–ú–û–í–ù–ò–ö–ê //////////////////////////////////////
        if command_value == 'new_handle_dialogue':
            print(f"in body handle dialogue: {user_text}")

            #—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—á–∏–∫—É–≤–∞–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞
    
            init_msg = await send_phrase(conn, bot, chat_id, db_user_id, "phrase_10", "‚úÖ ")

            profile_reference = {
                  "name": "Mariam",
                  "age": 24,
                  "country": "Egypt",
                  "difficulty_level": "1‚Äì5",
                  "religious_context": "muslim",
                  "personality": "Skeptical but emotionally open",
                  "barriers": ["God and suffering", "trust in religion"],
                  "openness": "Medium",
                  "goal": "To see if God is real and personal",
                  "big_five_traits": {
                        "openness": "high",
                        "conscientiousness": "medium",
                        "extraversion": "low",
                        "agreeableness": "medium",
                        "neuroticism": "high"
                  },
                  "temperament": "Melancholic",
                  "worldview_and_values": ["Humanism", "Skepticism"],
                  "beliefs": ["Religion is man-made", "God may exist but is distant"],
                  "motivation_and_goals": ["Find meaning after loss", "Reconnect with hope"],
                  "background": "Grew up in nominal faith, lost friend in accident",
                  "erikson_stage": "Young adulthood ‚Äî Intimacy vs. Isolation",
                  "emotional_intelligence": "Moderate",
                  "thinking_style": "Analytical with emotional interference",
                  "biological_factors": ["Sleep-deprived", "Hormonal imbalance"],
                  "social_context": ["Urban Egyptian culture", "Peers secular"],
                  "enneagram": "Type 4 ‚Äî Individualist",
                  "disc_profile": "C ‚Äî Conscientious",
                  "stress_tolerance": "Low",
                  "self_image": "Feels broken, searching for healing",
                  "cognitive_biases": ["Confirmation bias", "Negativity bias"],
                  "attachment_style": "Anxious-preoccupied",
                  "religion": "Nominal Christian",
                  "trauma_history": "Friend's death in accident ‚Äî unresolved",
                  "stress_level": "High",
                  "habits": ["Night owl", "Avoids social events"],
                  "why_contacted_us": "Saw Christian video that made her cry",
                  "digital_behavior": ["Active on Instagram", "Searches for spiritual content"],
                  "peer_pressure": ["Friends mock faith"],
                  "attachment_history": "Emotionally distant parents (based on Bowlby theory)",
                  "culture": "Middle Eastern / Egyptian",
                  "neuroprofile": "Sensitive limbic response",
                  "meta_programs": ["Away-from motivation", "External validation"],
                  "philosophical_views": ["Existentialism", "Skepticism"]
            }

            messages = [
                {
                    "role": "system",
                    "content": "–¢–∏ ‚Äî –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ –≤–∏–≥–∞–¥–∞–Ω–∏—Ö –ª—é–¥–µ–π."
                },
                {
                    "role": "user",
                    "content": f"""–ó–≥–µ–Ω–µ—Ä—É–π –Ω–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞ —Ñ–æ—Ä–º–∞—Ç —è–∫ –≤ –Ω–∞–¥–∞–Ω–æ–º—É –Ω–∏–∂—á–µ –ø—Ä–∏–∫–ª–∞–¥—ñ –ø—Ä–æ—Ñ—ñ–ª—é, –∞–ª–µ –∑ –Ω–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏, —è–∫—ñ –ª–æ–≥—ñ—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –ø–æ–ª—è–º.
            
            –û—Å—å –ø—Ä–∏–∫–ª–∞–¥ –ø—Ä–æ—Ñ—ñ–ª—é:
            {json.dumps(profile_reference, ensure_ascii=False, indent=2)}
            
            –£ –∑–Ω–∞—á–µ–Ω–Ω—ñ –∫–ª—é—á–∞ `difficulty_level` –≤ –Ω–æ–≤–æ–º—É –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ –∑–∞–º—ñ–Ω–∏ —Ü–∏—Ñ—Ä—É –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, —è–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç—ñ–π —Ü–∏—Ñ—Ä—ñ —Ä–∞–∑–æ–º –∑ —Ü–∏—Ñ—Ä–æ—é –∑ —Ü—å–æ–≥–æ —Å–ø–∏—Å–∫—É:
              1 ‚Äî Open, with a mild spiritual inquiry
              2 ‚Äî Doubtful, searching, but with barriers
              3 ‚Äî Emotionally wounded, closed-off, critical
              4 ‚Äî Hostile or apathetic, with negative personal experience
              5 ‚Äî Provocative, aggressive, theologically well-versed

            –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é –≤—Ä–∞—Ö—É–π –±—É–¥—å –ª–∞—Å–∫–∞ –æ—Å—å —Ü—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è: {user_text}.

            
            –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–∞–π —É —Ñ–æ—Ä–º–∞—Ç—ñ **JSON**, –±–µ–∑ –∂–æ–¥–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å.
            –ë–µ–∑ –∫–æ–¥—É markdown, —Ç—ñ–ª—å–∫–∏ —á–∏—Å—Ç–∏–π JSON."""
                }
            ]


            
            response = await query_openai_chat(messages=messages)
            
            # –ü–∞—Ä—Å–∏–º–æ json –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —á–∞—Ç—É
            try:
                persona = json.loads(response)
            except Exception as e:
                await bot.send_message(chat_id=chat_id, text=f"‚ùå Parsing error: {e}")
                return {"status": "error_parsing_profile"}

            # –í—Å—Ç–∞–≤–ª—è—î–º–æ –≤ –±–∞–∑—É
            # 1. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥ —ñ –≤–∏—Ç—è–≥—É—î–º–æ –π–æ–≥–æ id
            dialogue_row = await conn.fetchrow(
                """
                INSERT INTO dialogues_stat (user_id) VALUES ($1)
                RETURNING id
                """,
                db_user_id
            )
            dialogue_id = dialogue_row["id"]
            
            # 2. –í—Å—Ç–∞–≤–ª—è—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∑ id_dialogue
            await conn.execute(
                """
                INSERT INTO simulated_personas (
                    user_id, name, age, country, difficulty_level, religious_context, personality,
                    barriers, openness, goal, big_five_traits, temperament, worldview_and_values,
                    beliefs, motivation_and_goals, background, erikson_stage, emotional_intelligence,
                    thinking_style, biological_factors, social_context, enneagram, disc_profile,
                    stress_tolerance, self_image, cognitive_biases, attachment_style, religion,
                    trauma_history, stress_level, habits, why_contacted_us, digital_behavior,
                    peer_pressure, attachment_history, culture, neuroprofile, meta_programs, philosophical_views,
                    id_dialogue
                ) VALUES (
                    $1, $2, $3, $4, $5, $6, $7,
                    $8, $9, $10, $11, $12, $13,
                    $14, $15, $16, $17, $18,
                    $19, $20, $21, $22, $23,
                    $24, $25, $26, $27, $28,
                    $29, $30, $31, $32, $33,
                    $34, $35, $36, $37, $38, $39,
                    $40
                )
                """,
                db_user_id,
                persona.get("name"),
                persona.get("age"),
                persona.get("country"),
                persona.get("difficulty_level"),
                persona.get("religious_context"),
                persona.get("personality"),
                persona.get("barriers"),
                persona.get("openness"),
                persona.get("goal"),
                json.dumps(persona.get("big_five_traits")),
                persona.get("temperament"),
                persona.get("worldview_and_values"),
                persona.get("beliefs"),
                persona.get("motivation_and_goals"),
                persona.get("background"),
                persona.get("erikson_stage"),
                persona.get("emotional_intelligence"),
                persona.get("thinking_style"),
                persona.get("biological_factors"),
                persona.get("social_context"),
                persona.get("enneagram"),
                persona.get("disc_profile"),
                persona.get("stress_tolerance"),
                persona.get("self_image"),
                persona.get("cognitive_biases"),
                persona.get("attachment_style"),
                persona.get("religion"),
                persona.get("trauma_history"),
                persona.get("stress_level"),
                persona.get("habits"),
                persona.get("why_contacted_us"),
                persona.get("digital_behavior"),
                persona.get("peer_pressure"),
                persona.get("attachment_history"),
                persona.get("culture"),
                persona.get("neuroprofile"),
                persona.get("meta_programs"),
                persona.get("philosophical_views"),
                dialogue_id  # ‚Üê –¥–æ–¥–∞—î–º–æ —Å—é–¥–∏
            )
            
            await init_msg.delete()
            await send_phrase(conn, bot, chat_id, db_user_id, "phrase_8", "‚úÖ ")   
            await conn.execute(
                "UPDATE user_commands SET command = 'none' WHERE user_id = $1",
                db_user_id
            )
                
            mark = 1



        
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        existing_user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id)
        print(f"existing_user: {existing_user}")

        #=========================================== –§–£–ù–ö–¶–Ü–á –ü–û–®–£–ö–£ –ù–ï–í–ò–ó–ù–ê–ß–ï–ù–ò–• –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö =============================

        #////////////////////////////// –¢–ï–°–¢ –∫–æ–º—ñ—Ä–∫–∏ –ü–†–û –ú–û–í–£ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø ////////////////////////////////////
        if not existing_user["language"]:
            print(f"–¢–µ—Å—Ç –ø—É—Å—Ç–æ—ó –∫–æ–º—ñ—Ä–∫–∏ –º–æ–≤–∏")
     
            await conn.execute("""
                INSERT INTO user_commands (user_id, command)
                VALUES ($1, $2)
                ON CONFLICT (user_id) DO UPDATE SET command = EXCLUDED.command
            """, db_user_id, "language")
        
            await bot.send_message(
                chat_id=chat_id,
                text="üî• Enter your language",
                parse_mode="Markdown"
            )
            return {"status": "waiting_language"}
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        #////////////////////////////// –¢–ï–°–¢ –∫–æ–º—ñ—Ä–∫–∏ –í –¢–ê–ë–õ–ò–¶–Ü –ü–ï–†–ï–ö–õ–ê–î–Ü–í (–∑ –º–∏—Ç—Ç—î–≤–∏–º –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è–º) //////////////////////////
        row = await conn.fetchrow(
            "SELECT 1 FROM translated_phrases WHERE user_id = $1 AND phrase_1 IS NOT NULL",
            db_user_id
        )
        print(f"row ----------------------------------------- : {row}")
        
        if row:
            print("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î —ñ –ø–æ–ª–µ phrase_1 –∑–∞–ø–æ–≤–Ω–µ–Ω–µ")
            row_1 = await conn.fetchrow(
                "SELECT phrase_1 FROM translated_phrases WHERE user_id = $1",
                db_user_id
            )
            
            if row_1 is not None:
                phrase_value = row_1['phrase_1']  # –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è phrase_1
                print(f"–ó–Ω–∞—á–µ–Ω–Ω—è phrase_1: {phrase_value}")

        else:
            print(f"–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª—É–∂–±–æ–≤–∏—Ö —Ä–µ–ø–ª—ñ–∫")
            print("‚ùå –ê–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î, –∞–±–æ –ø–æ–ª–µ language –ø–æ—Ä–æ–∂–Ω—î")
            #await bot.send_message(chat_id=chat_id, text=f"‚úÖ Switching to your language of communication.")
                

                    
            # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏
            row = await conn.fetchrow("SELECT language FROM users WHERE id = $1", db_user_id)
            language = row["language"] if row else "eng"
            
            # –ù–∞–±—ñ—Ä –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Ñ—Ä–∞–∑
            phrases = (
                "Please enter your name.", # - phrase_1 (
                "Name saved.", # - phrase_2
                "Invalid input", # - phrase_3
                "Which country are you from?", # - phrase_4
                "Country name saved.", # - phrase_5
                "Would you like me to automatically generate the characteristics of your conversation partner?", # - phrase_6
                "Please describe your conversation partner.", # - phrase_7
                "Conversation partner's profile generated.", # - phrase_8
                "Let's chat!", # - phrase_9
                "Initializing the characteristics of your conversation partner...", # - phrase_10
                "The profile of your conversation partner already exists. Let's continue the dialogue.", # - phrase_11
                "Your dialogue has come to an end. We will now conduct a detailed analysis and summarize the results.", # - phrase_12
                "\n\nThank you for the conversation. \nYou will automatically be offered to generate a new respondent profile and start a new dialogue.", # - phrase_13
                "Conversation partner's profile generated.", # - phrase_14
                "Conversation partner's profile generated." # - phrase_15
            )
            
                            
            # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç
            prompt = (
                f"Translate the following English phrases into {language}. "
                "Return only the translations, one per line, in the same order. "
                "Do not include the original English text, any explanations, or formatting.\n\n" +
                "\n".join(phrases)
            )
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è OpenAI
            messages = [
                {"role": "system", "content": "You are a translation engine. Respond with only the translated phrases, no explanations, no original text, and no formatting."},
                {"role": "user", "content": prompt}
            ]
    
    
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç
            response_text = await query_openai_chat(messages)
    
            print(f"Text_from_GPT : {response_text}")
            
            # –†–æ–∑–±–∏—Ä–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∫–æ—Ä—Ç–µ–∂
            translated_phrases = tuple(
                line.strip()
                for line in response_text.strip().split("\n")
                if line.strip()  # –≤—ñ–¥–∫–∏–¥–∞—î–º–æ –ø—É—Å—Ç—ñ —Ä—è–¥–∫–∏
            )
    
            print(f"translated_phrases : {translated_phrases}")
    
    
            # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –¥–æ 15 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ None, —è–∫—â–æ –º–µ–Ω—à–µ
            translated_phrases = list(translated_phrases)
            while len(translated_phrases) < 15:
                translated_phrases.append(None)
    
    
            
            # –í–Ω–µ—Å–µ–Ω–Ω—è —É —Ç–∞–±–ª–∏—Ü—é translated_phrases (—Ä–µ—à—Ç–∞ —Ñ—Ä–∞–∑ ‚Äî NULL)
            await conn.execute("""
                INSERT INTO translated_phrases (
                    user_id,
                    phrase_1, phrase_2, phrase_3, phrase_4, phrase_5,
                    phrase_6, phrase_7, phrase_8, phrase_9, phrase_10,
                    phrase_11, phrase_12, phrase_13, phrase_14, phrase_15
                ) VALUES (
                    $1, $2, $3, $4, $5,
                    $6, $7, $8, $9, $10,
                    $11, $12, $13, $14, $15, $16
                )
                ON CONFLICT (user_id) DO UPDATE SET
                phrase_1 = EXCLUDED.phrase_1,
                phrase_2 = EXCLUDED.phrase_2,
                phrase_3 = EXCLUDED.phrase_3,
                phrase_4 = EXCLUDED.phrase_4,
                phrase_5 = EXCLUDED.phrase_5,
                phrase_6 = EXCLUDED.phrase_6,
                phrase_7 = EXCLUDED.phrase_7,
                phrase_8 = EXCLUDED.phrase_8,
                phrase_9 = EXCLUDED.phrase_9,
                phrase_10 = EXCLUDED.phrase_10,
                phrase_11 = EXCLUDED.phrase_11,
                phrase_12 = EXCLUDED.phrase_12,
                phrase_13 = EXCLUDED.phrase_13,
                phrase_14 = EXCLUDED.phrase_14,
                phrase_15 = EXCLUDED.phrase_15
            """, db_user_id, *translated_phrases[:15])
    

        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        #/////////////////////////////////////// –¢–ï–°–¢ –∫–æ–º—ñ—Ä–∫–∏ –î–ï –í–ö–ê–ó–ê–ù–û –Ü–ú–Ø ////////////////////////////////////////////////
        if not existing_user["name"]:
            print(f"–¢–µ—Å—Ç –ø—É—Å—Ç–æ—ó –∫–æ–º—ñ—Ä–∫–∏ —ñ–º—è")


            await conn.execute("""
                INSERT INTO user_commands (user_id, command)
                VALUES ($1, $2)
                ON CONFLICT (user_id) DO UPDATE SET command = EXCLUDED.command
            """, db_user_id, "name")



            await send_phrase(conn, bot, chat_id, db_user_id, "phrase_1", "üî• ")
            return {"status": "waiting_name"}

        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        #/////////////////////////////////////// –¢–ï–°–¢ –∫–æ–º—ñ—Ä–∫–∏ –î–ï –í–ö–ê–ó–ê–ù–û –ö–†–ê–á–ù–£ ////////////////////////////////////////////////
        if not existing_user["country"]:
            print(f"–¢–µ—Å—Ç –ø—É—Å—Ç–æ—ó –∫–æ–º—ñ—Ä–∫–∏ –∫—Ä–∞—ó–Ω–∏")


            await conn.execute("""
                INSERT INTO user_commands (user_id, command)
                VALUES ($1, $2)
                ON CONFLICT (user_id) DO UPDATE SET command = EXCLUDED.command
            """, db_user_id, "country")



            await send_phrase(conn, bot, chat_id, db_user_id, "phrase_4", "üî• ")
            return {"status": "waiting_country"}

        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        


        #/////////////////////////////////////// –ü–ò–¢–ê–ù–ù–Ø –ø—Ä–æ –†–£–ß–ù–ï –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –°–ü–Ü–í–†–û–ó–ú–û–í–ù–ò–ö–ê ////////////////////////////////
        if not existing_user["initial"]:
            print(f"–¢–µ—Å—Ç –ø—É—Å—Ç–æ—ó –∫–æ–º—ñ—Ä–∫–∏ initial")


            await conn.execute("""
                INSERT INTO user_commands (user_id, command)
                VALUES ($1, $2)
                ON CONFLICT (user_id) DO UPDATE SET command = EXCLUDED.command
            """, db_user_id, "new_dialogue")



            await send_phrase(conn, bot, chat_id, db_user_id, "phrase_6", "üî• ")
            await conn.execute(
                "UPDATE users SET initial = $1 WHERE id = $2",
                'pss', db_user_id
            )
            return {"status": "waiting_seeker_status"}

        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
        #///////////////////////////////// –ü–ò–¢–ê–ù–ù–Ø —á–∏ –û–°–¢–ê–ù–ù–Ø –î–Ü–Ø –ë–£–õ–ê –û–ë–†–û–ë–ù–ò–ö–û–ú —Ç–∞–±–ª–∏—Ü—ñ users /////////////////////////////
        if mark == 1:
            await send_phrase(conn, bot, chat_id, db_user_id, "phrase_9", "üî• ")
            return {"status": "data_updated"}
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        
        #====================================================================================================================
        #////////////////////////////////////////////////////// –î–Ü–ê–õ–û–ì  //////////////////////////////////////////////////////
        #====================================================================================================================

        
        thinking_msg = await bot.send_message(chat_id=chat_id, text="üß† –î—É–º–∞—é...")


        msg_count, dialogue_id = await increment_message_count(conn, db_user_id)
        print("üì¶ dialogue_id:", dialogue_id)

        await conn.execute(
            "INSERT INTO dialogs (user_id, role, message, created_at, id_dialogue) VALUES ($1, 'user', $2, NOW(), $3)",
            db_user_id, user_text, dialogue_id
        )

        rows = await conn.fetch(
            "SELECT role, message FROM dialogs WHERE user_id = $1 ORDER BY id DESC LIMIT 10",
            db_user_id
        )
        rows = list(reversed(rows))

        
        user_messages = [
            {
                "role": "assistant" if row["role"] == "ai" else row["role"],
                "content": row["message"]
            }
            for row in rows
        ]

        print("üì¶ user_id:", db_user_id)
        # –í–∏—Ç—è–≥–Ω—É—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å —ñ–∑ –±–∞–∑–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, user_id)
        profile_row = await conn.fetchrow(
            "SELECT * FROM simulated_personas WHERE user_id = $1 AND id_dialogue = $2",
            db_user_id, dialogue_id
        )
        #print("üì¶ profile_row:", profile_row)
        if not profile_row:
            # –Ø–∫—â–æ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ–º–∞—î, –º–æ–∂–µ—à –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
            print("üì¶ profile is empty:")
            profile_content = "{}"
        else:
            # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ –ø—Ä–æ—Ñ—ñ–ª—å —É —Ç–∞–±–ª–∏—Ü—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —É –ø–æ–ª—ñ profile_json —É –≤–∏–≥–ª—è–¥—ñ JSON —Ä—è–¥–∫–∞
            # –ó–±–∏—Ä–∞—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ —ñ–∑ –ø—Ä–æ—Ñ—ñ–ª–µ–º
            profile_content = {
                "name": profile_row["name"],
                "age": profile_row["age"],
                "country": profile_row["country"],
                "difficulty_level": profile_row["difficulty_level"],
                "religious_context": profile_row["religious_context"],
                "personality": profile_row["personality"],
                "barriers": profile_row["barriers"],  # —è–∫—â–æ —Å–ø–∏—Å–æ–∫ ‚Äî –∑–∞–ª–∏—à–∞—î–º–æ
                "openness": profile_row["openness"],
                "goal": profile_row["goal"],
                "big_five_traits": json.loads(profile_row["big_five_traits"]),
                "temperament": profile_row["temperament"],
                "worldview_and_values": profile_row["worldview_and_values"],
                "beliefs": profile_row["beliefs"],
                "motivation_and_goals": profile_row["motivation_and_goals"],
                "background": profile_row["background"],
                "erikson_stage": profile_row["erikson_stage"],
                "emotional_intelligence": profile_row["emotional_intelligence"],
                "thinking_style": profile_row["thinking_style"],
                "biological_factors": profile_row["biological_factors"],
                "social_context": profile_row["social_context"],
                "enneagram": profile_row["enneagram"],
                "disc_profile": profile_row["disc_profile"],
                "stress_tolerance": profile_row["stress_tolerance"],
                "self_image": profile_row["self_image"],
                "cognitive_biases": profile_row["cognitive_biases"],
                "attachment_style": profile_row["attachment_style"],
                "religion": profile_row["religion"],
                "trauma_history": profile_row["trauma_history"],
                "stress_level": profile_row["stress_level"],
                "habits": profile_row["habits"],
                "why_contacted_us": profile_row["why_contacted_us"],
                "digital_behavior": profile_row["digital_behavior"],
                "peer_pressure": profile_row["peer_pressure"],
                "attachment_history": profile_row["attachment_history"],
                "culture": profile_row["culture"],
                "neuroprofile": profile_row["neuroprofile"],
                "meta_programs": profile_row["meta_programs"],
                "philosophical_views": profile_row["philosophical_views"],
            }
        
            # –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏–º–æ –Ω–∞ –≥–∞—Ä–Ω–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
            profile_content = json.dumps(profile_content, ensure_ascii=False, indent=2)
            #print("üì¶ profile_content:", profile_content)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ system prompt
        system_message = {
            "role": "system",
            "content": f"You behave like a person who possesses the personality traits specified in the profile: {profile_content}. You do not take the initiative to offer consultative help as a typical chat assistant would. Instead, you tend to ask simple or banal questions yourself."
        }
        
        # –î–∞–ª—ñ —Ñ–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –¥–æ–¥–∞—î–º–æ system_message —Å–ø–æ—á–∞—Ç–∫—É, –ø–æ—Ç—ñ–º user_messages
        messages = [system_message] + user_messages

    
        # messages = [{"role": row["role"], "content": row["message"]} for row in rows]
        # messages = [{'role': 'user', 'content': user_text}]

        response_text = await query_openai_chat(messages)

  
        await conn.execute(
            "INSERT INTO dialogs (user_id, role, message, created_at, id_dialogue) VALUES ($1, 'ai', $2, NOW(), $3)",
            db_user_id, response_text, dialogue_id
        )
        
        try:
            await thinking_msg.delete()
        except:
            pass

        await bot.send_message(chat_id=chat_id, text=response_text)

        #====================================================================================================================
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #====================================================================================================================

        

        #///////////////////////////////// –ü–ò–¢–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–ù–Ø –î–Ü–ê–õ–û–õ–ì–£ (–≤–∏—á–µ—Ä–ø–∞–Ω–Ω—è –º–µ—Å–∏–¥–∂—ñ–≤) ////////////////////////////////
        if msg_count and msg_count >= 11:
            init_msg = await bot.send_message(chat_id=chat_id, text=f"üîîüîîüîîüîîüîîüîîüîîüîîüîîüîîüîîüîîüîîüîî")
            await asyncio.sleep(5)  # –ó–∞—Ç—Ä–∏–º–∫–∞ 5 —Å–µ–∫—É–Ω–¥
            await init_msg.delete()
            await send_phrase(conn, bot, chat_id, db_user_id, "phrase_12", "‚úÖ ")
            await summarize_dialogue(conn, dialogue_id, chat_id, db_user_id)
            await send_phrase(conn, bot, chat_id, db_user_id, "phrase_13", "‚úÖ ")
            await conn.execute(
                "UPDATE user_commands SET command = 'new_dialogue' WHERE user_id = $1",
                db_user_id
            )
            await send_phrase(conn, bot, chat_id, db_user_id, "phrase_6", "üî• ")
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
           


    




    finally:
        await conn.close()


    return {"status": "ok"}
