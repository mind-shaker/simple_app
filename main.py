#==================================================== –Ü–º–ø–æ—Ä—Ç–∏ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
from fastapi import FastAPI, Request
from telegram import Bot
import os
import asyncpg
import redis.asyncio as redis
from openai import AsyncOpenAI
import json


#=================================================== –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
DATABASE_URL = os.getenv("DATABASE_URL")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
REDIS_URL = os.getenv("REDIS_URL")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, redis://:password@host:port

#=================================================== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
bot = Bot(token=TELEGRAM_TOKEN)
app = FastAPI()
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
redis_client = None

#=================================================== –ü–æ–¥—ñ—ó –∑–∞–ø—É—Å–∫—É
@app.on_event("startup")
async def startup_event():
    global redis_client
    try:
        redis_client = redis.from_url(REDIS_URL, encoding="utf-8", decode_responses=True)
        await redis_client.ping()
        print("[REDIS] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!")
    except Exception as e:
        print(f"[REDIS] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")

#=================================================== –ü–æ–¥—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
@app.on_event("shutdown")
async def shutdown_event():
    global redis_client
    if redis_client:
        await redis_client.close()
        print("[REDIS] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–µ.")

#=================================================== –î–ï–ö–õ–ê–†–ê–¶–Ü–Ø –§–£–ù–ö–¶–Ü–á "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ PostgreSQL" 0
async def get_connection():
    return await asyncpg.connect(DATABASE_URL)

#=================================================== –î–ï–ö–õ–ê–†–ê–¶–Ü–Ø –§–£–ù–ö–¶–Ü–á "–í–∏–∫–ª–∏–∫ OpenAI API"
async def query_openai_chat(messages: list[dict]) -> str:
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ OpenAI API: {e}"

#=================================================== –û–±—Ä–æ–±–∫–∞ Telegram webhook
@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_text = message.get("text", "")
    from_user = message.get("from", {})

    user_id = from_user.get("id")
    username = from_user.get("username")
    first_name = from_user.get("first_name", "")
    last_name = from_user.get("last_name", "")
    full_name = f"{first_name} {last_name}".strip()

    mark = 0
    #-------------------------- –†–æ–±–æ—Ç–∞ –∑ –±–∞–∑–æ—é (–≤–∏–ª—É—á–µ–Ω–æ):
    conn = await get_connection() #++++++++++++++++++++++ –í–ò–ö–õ–ò–ö –§–£–ù–ö–¶–Ü–á "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ PostgreSQL" 0 +++++++++++++++++++
    try:
        #///////////////////////////////////////// –¢–ï–°–¢ –ù–ê –ü–ï–†–®–ò–ô –í–•–Ü–î –í –ë–û–¢–ê //////////////////////////////////////////////
        # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –≤ —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á user_id –≤ –ø–æ–ª—ñ —Ç–∞–±–ª–∏—Ü—ñ telegram_id. existing_user - —Ü–µ –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω—å –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        existing_user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id)

        # –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ telegram_id, username, full_name –æ—Ç—Ä–∏–º–∞–Ω–∏–º–∏ –∑ —Ç–µ–ª–µ–≥—Ä–∞–º—É –¥–∞–Ω–∏–º–∏ user_id, username, full_name
        if user_id is not None:
            if not existing_user:
                await conn.execute(
                    "INSERT INTO users (telegram_id, username, full_name) VALUES ($1, $2, $3)",
                    user_id, username, full_name
                )
                await bot.send_message(chat_id=chat_id, text="üëã Welcome! You are our new user.\nTo set up your profile, please answer a few questions.")
                mark = 1
        else:
            print("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—Å—Ç–∞–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: user_id = None")
            return {"status": "skipped_null_user"}
        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        db_user_id = existing_user["id"] if existing_user else (await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id))["id"]

        #////////////////////////////// –û–ë–†–û–ë–ö–ê –†–ï–°–ü–û–ù–°–£ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ü–†–û –ú–û–í–£ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø ////////////////////////////////////
        command_value = await conn.fetchval(
            "SELECT command FROM user_commands WHERE user_id = $1",
            db_user_id
        )
        print(f"Current command: {command_value}")
        if command_value == 'language':
            messages = [
                {"role": "system", "content": "You are a language conversion service."},
                {
                    "role": "user",
                    "content": f'Provide the ISO 639-2 three-letter code for this language: "{user_text}". Return only the code, without additional words.'
                }
            ]
        
            # Get response from OpenAI in English
            language_code = await query_openai_chat(messages)
            language_code = language_code.strip().lower()
        
            # Validate the code
            if len(language_code) == 3 and language_code.isalpha():
                # Save to DB
                await conn.execute(
                    "UPDATE users SET language = $1 WHERE id = $2",
                    language_code, db_user_id
                )
                await bot.send_message(chat_id=chat_id, text=f"‚úÖ Language saved: {language_code}\nSwitching to your language of communication.")




                # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏
                row = await conn.fetchrow("SELECT language FROM users WHERE user_id = $1", db_user_id)
                language = row["language"] if row else "Ukrainian"
                
                # –ù–∞–±—ñ—Ä –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Ñ—Ä–∞–∑
                phrases = (
                    "Please enter your name.",
                    "Which country are you from?",
                    "Would you like me to automatically generate the characteristics of your conversation partner?",
                    "Please describe your conversation partner.",
                    "Let's chat!"
                )
                
                # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
                prompt = (
                    f"Translate the following English phrases into {language}:\n\n" +
                    "\n".join(f"- {phrase}" for phrase in phrases)
                )
                
                # –ì–æ—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è OpenAI
                messages = [
                    {"role": "system", "content": "You are a helpful assistant that translates phrases accurately."},
                    {"role": "user", "content": prompt}
                ]
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç
                response_text = await query_openai_chat(messages)
                
                # –†–æ–∑–±–∏—Ä–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∫–æ—Ä—Ç–µ–∂
                translated_phrases = tuple(
                    line[2:].strip()
                    for line in response_text.strip().split("\n")
                    if line.startswith("- ")
                )

                # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –¥–æ 5 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —è–∫—â–æ –º–µ–Ω—à–µ
                translated_phrases = list(translated_phrases)
                while len(translated_phrases) < 5:
                    translated_phrases.append(None)


                # –í–∏–≤—ñ–¥ —É Telegram
                for phrase in translated_phrases:
                    if phrase:  # –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ None
                        await bot.send_message(chat_id=chat_id, text=phrase)
                
                # –í–Ω–µ—Å–µ–Ω–Ω—è —É —Ç–∞–±–ª–∏—Ü—é translated_phrases (—Ä–µ—à—Ç–∞ —Ñ—Ä–∞–∑ ‚Äî NULL)
                await conn.execute("""
                    INSERT INTO translated_phrases (user_id, phrase_1, phrase_2, phrase_3, phrase_4, phrase_5)
                    VALUES ($1, $2, $3, $4, $5, $6)
                """, db_user_id, *translated_phrases[:5])


                












                

                
                await conn.execute(
                    "UPDATE user_commands SET command = 'none' WHERE user_id = $1",
                    db_user_id
                )
            else:
                await bot.send_message(chat_id=chat_id, text=f"‚ùå Invalid language receive")

            mark = 1

        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        existing_user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id)

        #=========================================== –§–£–ù–ö–¶–Ü–á –ü–û–®–£–ö–£ –ù–ï–í–ò–ó–ù–ê–ß–ï–ù–ò–• –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö =============================

        #////////////////////////////// –¢–ï–°–¢ –∫–æ–º—ñ—Ä–∫–∏ –ü–†–û –ú–û–í–£ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø ////////////////////////////////////
        if not existing_user["language"]:
            await conn.execute("""
                INSERT INTO user_commands (user_id, command)
                VALUES ($1, $2)
            """, db_user_id, "language")
            await bot.send_message(
                chat_id=chat_id,
                text="üî• Enter your language",
                parse_mode="Markdown"
            )
            return {"status": "waiting_language"}

        #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    finally:
        await conn.close()
    #-------------------------- –†–æ–±–æ—Ç–∞ –∑ Redis:
    if redis_client and user_id:
        # –ó–∞–ø–∏—Å—É—î–º–æ —É Redis
        await redis_client.set(f"user:{user_id}:name", full_name)
        # –ß–∏—Ç–∞—î–º–æ –Ω–∞–∑–∞–¥ —ñ –≤–∏–≤–æ–¥–∏–º–æ —É –∫–æ–Ω—Å–æ–ª—å
        saved_name = await redis_client.get(f"user:{user_id}:name")
        print(f"[REDIS] user:{user_id}:name ‚Üí {saved_name}")

    return {"status": "ok"}
